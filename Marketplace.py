from pyrogram import Client, types, filters
import pyrostep
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import sqlite3
from openpyxl import Workbook
from openpyxl.styles import Font
from pyrogram.types import BotCommand, BotCommandScopeAllPrivateChats
import time
from copy import copy

app = Client("Bot_account", api_id="YOUR API ID", api_hash="YOUR API HASH", bot_token="BOT TOKEN")

pyrostep.listen(app)

async def new_commands():
    bot = await app.set_bot_commands([BotCommand("basket", "–ö–æ—Ä–∑–∏–Ω–∞üõí"), BotCommand("account", "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Çüë§"), BotCommand("start", "–ù–∞—á–∞—Ç—åüëã")], scope=BotCommandScopeAllPrivateChats())
    print(bot)

@app.on_message(filters.command(commands=['start']))
def start_bot(client, message):
    if message.chat.id == -1001789882072:
        return
    if message.from_user.id == 1333967466 or message.from_user.id == 6046959676 or message.from_user.id == 993684230:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002699–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data=f"red_table_orders")], [InlineKeyboardButton("\U0001F69B–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∞–º–∏", callback_data=f"admin_purchage")], [InlineKeyboardButton("\U0000270F–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"admin_table")], [InlineKeyboardButton("\U0001F440–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"view_table")]])
        app.send_message(chat_id=message.from_user.id, text="\U00002699–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07", reply_markup=markup)
    else:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            app.send_message(chat_id=message.from_user.id, text=f"\U0001F44BBotanica_club_bot –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å, **{message.from_user.first_name}**! –î–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ <a href='https://t.me/botanica_club'>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</a>, –∞ –¥–∞–ª—å—à–µ —è –ø–æ–º–æ–≥—É\U0001F917\n\n\U0001F6D2–ö–æ—Ä–∑–∏–Ω—É –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /basket\n\n\U0001F464–ê –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /account")
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0000270F\U0001F69A–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"add_delivery")]])
            app.send_message(chat_id=message.from_user.id, text=f"\U0001F44BBotanica_club_bot –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å, **{message.from_user.first_name}**! –î–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã —á–µ—Ä–µ–∑ <a href='https://t.me/botanica_club'>–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</a>, –∞ –¥–∞–ª—å—à–µ —è –ø–æ–º–æ–≥—É\U0001F917\n\n\U0001F464–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤", reply_markup=markup, disable_web_page_preview=True)
        connection.close()

@app.on_message(filters.command(commands=['basket']))
def basket(client, message):
    if message.chat.id == -1001789882072:
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status= ?", (message.from_user.id, 1))
    orders = cursor.fetchall()
    if orders != []:
        markup = []
        num = 0
        for order in orders:
            if num < 5:
                cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                osts = cursor.fetchall()
                button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_product{order[0]}num{order[1]}")]
                markup.append(button)
            num += 1
        if len(orders) > 5:
            markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_basket5")])
        markup.append([InlineKeyboardButton(text="\U00002705–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\U00002705", callback_data="new_order")])
        markup.append([InlineKeyboardButton(text="üìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time")])
        markup = InlineKeyboardMarkup(markup)
        app.send_message(chat_id=message.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0000203C–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ–∫–æ–π\U0001F447", reply_markup=markup)
    else:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="üìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time")]])
        app.send_message(chat_id=message.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0001F5D1–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\U0001F4AC", reply_markup=markup)
    connection.close()

@app.on_message(filters.command(commands=['account']))
def my_account(client, message):
        if message.chat.id == -1001789882072:
            return
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**.\n\n\U00002139–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n**–§–ò–û**: {user[0][1]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {user[0][2]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {user[0][3]}"
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07"
        app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        connection.close()

@app.on_callback_query()
async def answer(client, function_call):
    if function_call.data == "admin_purchage":
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F195–ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞", callback_data=f"new_purchage")], [InlineKeyboardButton("\U00002139–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫—É–ø–∫—É", callback_data=f"info_purchage")], [InlineKeyboardButton("\U00002716–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫—É–ø–∫—É", callback_data=f"del_purchage")], [InlineKeyboardButton("\U0000270F–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫—É–ø–∫—É", callback_data=f"edit_purchage")], [InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.message.from_user.id, text="\U0000270F–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup, message_id=function_call.message.id)
    elif function_call.data == "new_purchage":
        await part_new_purchage(function_call)
    elif "again_new_purchage" in function_call.data:
        name = (function_call.data)[18:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("DELETE FROM purchages WHERE name = ?", (name,))
        connection.commit()
        connection.close()
        await part_new_purchage(function_call)
    elif "save_purchage" in function_call.data:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        name = (function_call.data)[13:]
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U00002705–ó–∞–∫—É–ø–∫–∞ {name} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞", message_id=function_call.message.id, reply_markup=markup)
    elif function_call.data == "exit_table":
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002699–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data=f"red_table_orders")], [InlineKeyboardButton("\U0001F69B–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∞–º–∏", callback_data=f"admin_purchage")], [InlineKeyboardButton("\U0000270F–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"admin_table")], [InlineKeyboardButton("\U0001F440–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"view_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U00002699–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07", reply_markup=markup, message_id=function_call.message.id)
    elif function_call.data == "del_purchage" or function_call.data == "info_purchage" or function_call.data == "edit_purchage" or function_call.data == "new_table" or function_call.data == "add_column_table" or function_call.data == "view_table" or function_call.data == "view_table_orders":
        if function_call.data == "del_purchage":
            todo = "del_name_purchage"
            next = "del_next_purchage"
            text = "\U0001F534–ö–∞–∫—É—é –∑–∞–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å?\n\n\U0000203C–í —Å–ª—É—á–∞–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫—É–ø–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏. –í –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏. –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞"
        elif function_call.data == "info_purchage":
            todo = "inf_name_purchage"
            next = "inf_next_purchage"
            text = "\U0001F440–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π"
        elif function_call.data == "edit_purchage":
            todo = "edt_name_purchage"
            next = "edt_next_purchage"
            text = "\U0000270F–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π"    
        elif function_call.data == "new_table":
            todo = "new_tble_purchage"
            next = "new_next_purchage"
            text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤\n\n\U0000203C–í—Å–µ –∑–∞–∫–∞–∑—ã, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –í –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏" 
        elif function_call.data == "add_column_table":
            todo = "cln_tble_purchage"
            next = "cln_next_purchage"
            text = "\U00002795–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"
        elif function_call.data == "view_table":
            todo = "viw_tble_purchage"
            next = "viw_next_purchage"
            text = "\U0001F440–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–µ—ë" 
        elif function_call.data == "view_table_orders":
            todo = "ord_tble_purchage"
            next = "ord_next_purchage"
            text = "\U0001F440\U0001F4E6–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–µ—ë"  
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT name FROM purchages")
        purchages = cursor.fetchall()
        markup = []
        num = 0
        for purchage in purchages:
            if num < 5:
                markup.append([InlineKeyboardButton(text=f"{purchage[0]}", callback_data=f"{todo}{purchage[0]}")])
            num += 1
        if len(purchages) > 5:
            markup.append([InlineKeyboardButton(text="\U000027A1", callback_data=f"{next}5")])
        if function_call.data == "del_purchage" or function_call.data == "info_purchage" or function_call.data == "edit_purchage":
            markup.append([InlineKeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥", callback_data=f"admin_purchage")])
        elif function_call.data == "new_table" or function_call.data == "add_column_table":
            markup.append([InlineKeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥", callback_data=f"admin_table")])
        elif function_call.data == "view_table":
            markup.append([InlineKeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")])
        markup = InlineKeyboardMarkup(markup)
        connection.close()
        await app.edit_message_text(chat_id=function_call.from_user.id, text=text, message_id=function_call.message.id, reply_markup=markup)
    elif "del_next_purchage" in function_call.data or "edt_next_purchage" in function_call.data or "inf_next_purchage" in function_call.data or "new_next_purchage" in function_call.data or "cln_next_purchage" in function_call.data or "viw_next_purchage" in function_call.data or "ord_next_purchage" in function_call.data:
        next = (function_call.data)[17:]
        next = int(next)
        if "del_next_purchage" in function_call.data:
            todo = "del_name_purchage"
            next_name = "del_next_purchage"
            text = "\U0001F534–ö–∞–∫—É—é –∑–∞–∫—É–ø–∫—É –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å?\n\n\U0000203C–í —Å–ª—É—á–∞–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∑–∞–∫—É–ø–∫–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏ –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏. –í –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏. –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏ —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞"
        elif "inf_next_purchage" in function_call.data:
            todo = "inf_name_purchage"
            next_name = "inf_next_purchage"
            text = "\U0001F440–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π"
        elif "edt_next_purchage" in function_call.data:
            todo = "edt_name_purchage"
            next_name = "edt_next_purchage"
            text = "\U0000270F–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–π"  
        elif "new_next_purchage" in function_call.data:
            todo = "new_tble_purchage"
            next_name = "new_next_purchage"
            text = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–∞–∫—É–ø–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤\n\n\U0000203C–í—Å–µ –∑–∞–∫–∞–∑—ã, —Å–¥–µ–ª–∞–Ω–Ω—ã–µ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–π –∑–∞–∫—É–ø–∫–∏, –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã. –í –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ –≤—Å–µ–º–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"   
        elif "cln_next_purchage" in function_call.data:
            todo = "cln_tble_purchage"
            next_name = "cln_next_purchage"
            text = "\U00002795–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø–∫—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" 
        elif "viw_next_purchage" in function_call.data:
            todo = "viw_tble_purchage"
            next_name = "viw_next_purchage"
            text = "\U0001F440–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–µ—ë"
        elif "ord_next_purchage" in function_call.data:
            todo = "ord_tble_purchage"
            next_name = "ord_next_purchage"
            text = "\U0001F440\U0001F4E6–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫—É–ø–∫—É, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –Ω–µ—ë"  
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT name FROM purchages")
        purchages = cursor.fetchall()
        markup = []
        num = 0
        for purchage in purchages:
            if num >= next and num < next + 5:
                markup.append([InlineKeyboardButton(text=f"{purchage[0]}", callback_data=f"{todo}{purchage[0]}")])
            num += 1
        button = []
        if next >= 5:
            button.append(InlineKeyboardButton(text="\U00002B05", callback_data=f"{next_name}{next - 5}"))
        if len(purchages) - next > 5:
            button.append(InlineKeyboardButton(text="\U000027A1", callback_data=f"{next_name}{next + 5}"))
        markup.append(button)
        if "del_next_purchage" in function_call.data or "edt_next_purchage" in function_call.data or "inf_next_purchage" in function_call.data:
            markup.append([InlineKeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥", callback_data=f"admin_purchage")])
        elif "new_next_purchage" in function_call.data or "cln_next_purchage" in function_call.data:
            markup.append([InlineKeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥", callback_data=f"admin_table")])
        elif "viw_next_purchage" in function_call.data:
            markup.append([InlineKeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")])
        markup = InlineKeyboardMarkup(markup)
        connection.close()
        await app.edit_message_text(chat_id=function_call.from_user.id, text=text, message_id=function_call.message.id, reply_markup=markup)
    elif "del_name_purchage" in function_call.data:
        name = (function_call.data)[17:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        connection.commit()
        connection.close()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        connection.close()
        await view_table_orders(function_call, name)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("DELETE FROM purchages WHERE name = ?", (name,))
        connection.commit()
        cursor.execute("DELETE FROM Plants WHERE purchage = ?", (name,))
        connection.commit()
        cursor.execute("DELETE FROM orders WHERE purchage = ?", (name,))
        await app.send_message(chat_id=function_call.from_user.id, text=f"\U00002705–ó–∞–∫—É–ø–∫–∞ {name} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
    elif "inf_name_purchage" in function_call.data:
        name = (function_call.data)[17:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT name, time1, time2, time3, time4, time5 FROM purchages WHERE name = ?", (name,))
        purchage = cursor.fetchall()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U00002139–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–µ:\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** {purchage[0][0]}\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0][1]}\n**–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É:** {purchage[0][2]}\n**–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0][3]}\n**–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[0][4]}\n**–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[0][5]}", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "edt_name_purchage" in function_call.data:
        name = (function_call.data)[17:]
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –∑–∞–∫—É–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞; –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É; –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞; –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π; –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π\n\n\U00002705–ü—Ä–∏–º–µ—Ä:\n1-2 –¥–Ω–µ–π; 3-5 –¥–Ω–µ–π; 7 –¥–Ω–µ–π; 5-7 –¥–Ω–µ–π; 8-10 —á–∞—Å–æ–≤", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, edit_purchage, kwargs={"name": name})
    elif function_call.data == "admin_table":
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F195–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data=f"new_table")], [InlineKeyboardButton("\U00002796–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"del_column_table")], [InlineKeyboardButton("\U00002795–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"add_column_table")], [InlineKeyboardButton("\U0001F4CF–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"count_table")], [InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup, message_id=function_call.message.id)
    elif "new_tble_purchage" in function_call.data:
        name = (function_call.data)[17:]
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.send_message(chat_id=function_call.from_user.id, text=f"\U0001F195–í–≤–µ–¥–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{name}** –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ - –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: 25 - –ê–Ω—Ç—É—Ä–∏—É–º - 38 - 700, 35 - –°–∏–∑–∏–≥–∏—É–º - 5 - 800, ...", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, new_table, kwargs={"name": name})
    elif "right_new_table" in function_call.data:
        name = (function_call.data)[15:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, purchage, name, count, price FROM Temp_plants")
        all_plants = cursor.fetchall()
        cursor.execute("DELETE FROM Plants WHERE purchage = ?", (name,))
        connection.commit()
        for plant in all_plants:
            cursor.execute("INSERT INTO Plants (num, purchage, name, count, price, book, ordered) VALUES (?, ?, ?, ?, ?, ?, ?)", (plant[0], plant[1], plant[2], plant[3], plant[4], 0, 0))
        connection.commit()
        connection.close()
        await view_table_orders(function_call, name)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("DELETE FROM orders WHERE purchage = ?", (name,))
        connection.commit()
        connection.close()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ {all_plants[0][1]} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\U00002705", message_id=function_call.message.id, reply_markup=markup)
    elif "cln_tble_purchage" in function_call.data:
        name = (function_call.data)[17:]
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.send_message(chat_id=function_call.from_user.id, text="\U00002795–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ - –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: 25 - –ê–Ω—Ç—É—Ä–∏—É–º - 38 - 700", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, add_column_table, kwargs={"name": name})
    elif function_call.data == "del_column_table":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.send_message(chat_id=function_call.from_user.id, text="\U0001F522–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ **—É–¥–∞–ª–∏—Ç—å**", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, del_column_table)
    elif function_call.data == "count_table":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.send_message(chat_id=function_call.from_user.id, text="\U0001F4CF–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, count_table)
    elif "viw_tble_purchage" in function_call.data:
        name = (function_call.data)[17:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, name, count, price, book, ordered FROM Plants WHERE purchage = ?", (name,))
        all_plants = cursor.fetchall()
        text = f"\U0001F440–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{name}**:\n\n**–ù–æ–º–µ—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞ | –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ | –ó–∞–∫–∞–∑–∞–Ω–æ**\n"
        for plant in all_plants:
            text += f"{plant[0]} | {plant[1]} | {plant[2]} | {plant[3]}—Ä. | {plant[4]} | {plant[5]}\n"
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=text, reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "info_product" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[12:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        button = []
        if order != []:
            if order[0][2] > 1:
                button.append(InlineKeyboardButton(text="\U00002796", callback_data=f"minus_product{num_order}num{num_product}"))
            cursor.execute("SELECT count, price, purchage FROM Plants WHERE num = ?", (int(num_product),))
            count = cursor.fetchall()
            cursor.execute("SELECT time1, time2, time3, time4, time5 FROM purchages WHERE name = ?", (count[0][2],))
            times = cursor.fetchall()
            if count[0][0] > 0:
                button.append(InlineKeyboardButton(text="\U00002795", callback_data=f"plus_product{num_order}num{num_product}"))
            markup = [button]
            markup.append([InlineKeyboardButton(text="\U0000274C–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product{num_order}num{num_product}")])
            markup.append([InlineKeyboardButton(text="\U0001F519\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data="basket")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"**{order[0][1]}**, {order[0][2]}—à—Ç. {order[0][2] * count[0][1]}‚ÇΩ\n\nüìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\U0001F4CD–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: {times[0][0]}\n\U0001F4CD–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É: {times[0][1]}\n\U0001F4CD–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {times[0][2]}\n\U0001F4CD–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π: {times[0][3]}\n\U0001F4CD–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π: {times[0][4]}", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="\U0001F519\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data="basket")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0000274C–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "next_basket" in function_call.data:
        next_b = (function_call.data)[11:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 1))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num >= int(next_b) and num < int(next_b) + 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_product{order[0]}num{order[1]}")]
                    markup.append(button)
                num += 1
            if int(next_b) >= 5:
                markup.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥\U000025C0", callback_data=f"next_basket{int(next_b) - 5}")])
            if len(orders) - int(next_b) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_basket{int(next_b) + 5}")])
            markup.append([InlineKeyboardButton(text="\U00002705–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\U00002705", callback_data="new_order")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0000203C–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ–∫–æ–π\U0001F447", reply_markup=markup, message_id=function_call.message.id)
        else:
            await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
            await app.send_message(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0001F5D1–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\U0001F4AC")
        connection.close()
    elif function_call.data == "basket":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 1))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num < 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_product{order[0]}num{order[1]}")]
                    num += 1
                    markup.append(button)
            if len(orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_basket5")])
            markup.append([InlineKeyboardButton(text="\U00002705–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\U00002705", callback_data="new_order")])
            markup.append([InlineKeyboardButton(text="üìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0000203C–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ–∫–æ–π\U0001F447", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="üìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0001F5D1–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\U0001F4AC", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif  "plus_product" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[12:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        cursor.execute("SELECT time1, time2, time3, time4, time5 FROM purchages WHERE name = ?", (order[0][6],))
        times = cursor.fetchall()
        cursor.execute("UPDATE orders SET count = ? WHERE num = ? and product = ?", (order[0][2] + 1, int(num_order), int(num_product)))
        connection.commit()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        cursor.execute("SELECT book FROM Plants WHERE num = ?", (int(num_product),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] + 1, int(num_product)))
        connection.commit()
        button = []
        if order[0][2] > 1:
            button.append(InlineKeyboardButton(text="\U00002796", callback_data=f"minus_product{num_order}num{num_product}"))
        cursor.execute("SELECT count, price, book FROM Plants WHERE num = ?", (int(num_product),))
        count = cursor.fetchall()
        if count[0][0] > 0:
            button.append(InlineKeyboardButton(text="\U00002795", callback_data=f"plus_product{num_order}num{num_product}"))
        markup = [button]
        markup.append([InlineKeyboardButton(text="\U0000274C–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product{num_order}num{num_product}")])
        markup.append([InlineKeyboardButton(text="\U0001F519\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data="basket")])
        markup = InlineKeyboardMarkup(markup)
        connection.close()
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"**{order[0][1]}**, {order[0][2]}—à—Ç. {order[0][2] * count[0][1]}‚ÇΩ\n\nüìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\U0001F4CD–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: {times[0][0]}\n\U0001F4CD–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É: {times[0][1]}\n\U0001F4CD–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {times[0][2]}\n\U0001F4CD–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π: {times[0][3]}\n\U0001F4CD–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π: {times[0][4]}", reply_markup=markup, message_id=function_call.message.id)
    elif  "minus_product" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[13:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        cursor.execute("SELECT time1, time2, time3, time4, time5 FROM purchages WHERE name = ?", (order[0][6],))
        times = cursor.fetchall()
        cursor.execute("UPDATE orders SET count = ? WHERE num = ? and product = ?", (order[0][2] - 1, int(num_order), int(num_product)))
        connection.commit()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        button = []
        if order[0][2] > 1:
            button.append(InlineKeyboardButton(text="\U00002796", callback_data=f"minus_product{num_order}num{num_product}"))
        cursor.execute("SELECT book FROM Plants WHERE num = ?", (int(num_product),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - 1, int(num_product)))
        connection.commit()
        cursor.execute("SELECT count, price, book FROM Plants WHERE num = ?", (int(num_product),))
        count = cursor.fetchall()
        if count[0][0] > 0:
            button.append(InlineKeyboardButton(text="\U00002795", callback_data=f"plus_product{num_order}num{num_product}"))
        markup = [button]
        markup.append([InlineKeyboardButton(text="\U0000274C–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_product{num_order}num{num_product}")])
        markup.append([InlineKeyboardButton(text="\U0001F519\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data="basket")])
        markup = InlineKeyboardMarkup(markup)
        connection.close()
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"**{order[0][1]}**, {order[0][2]}—à—Ç. {order[0][2] * count[0][1]}‚ÇΩ\n\nüìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\U0001F4CD–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞: {times[0][0]}\n\U0001F4CD–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É: {times[0][1]}\n\U0001F4CD–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {times[0][2]}\n\U0001F4CD–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π: {times[0][3]}\n\U0001F4CD–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π: {times[0][4]}", reply_markup=markup, message_id=function_call.message.id)
    elif "delete_product" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[14:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT count FROM orders WHERE num = ? and product = ?", (int(num_order), int(num_product)))
        count = cursor.fetchall()
        cursor.execute("SELECT book FROM Plants WHERE num = ?", (int(num_product),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - count[0][0], int(num_product)))
        connection.commit()
        cursor.execute("DELETE FROM orders WHERE num = ? and product = ?", (int(num_order), int(num_product)))
        connection.commit()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 1))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num < 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_product{order[0]}num{order[1]}")]
                    markup.append(button)
                num += 1
            if len(orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_basket5")])
            markup.append([InlineKeyboardButton(text="\U00002705–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\U00002705", callback_data="new_order")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0000203C–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ–∫–æ–π\U0001F447", reply_markup=markup, message_id=function_call.message.id)
        else:
            await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
            await app.send_message(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0001F5D1–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\U0001F4AC") 
        connection.close()
    elif function_call.data == "red_table_orders":
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F195–ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data=f"add_admin_order")], [InlineKeyboardButton("\U0001F440–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", callback_data=f"view_order")], [InlineKeyboardButton("\U0000274C–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"del_order")], [InlineKeyboardButton("\U0001F440\U0001F4CE–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤", callback_data=f"view_table_orders")], [InlineKeyboardButton("\U0000274C\U0001F4B8–£–¥–∞–ª–∏—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data=f"delete_unpay")], [InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup, message_id=function_call.message.id)
    elif function_call.data == "new_order":
        try:
            connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
            cursor = connection.cursor()
            cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 1))
            orders = cursor.fetchall()
            text = f"\U0001F7E2\U0001F195–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ`{orders[0][0]}` –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {orders[0][5]}!\n\n"
            order_num = orders[0][0]
            user_text = f"\U0001F7E2\U0001F551–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚Ññ`{orders[0][0]}` –ø—Ä–æ–¥–∞–≤—Ü–æ–º\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –∏ —Å—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            spis_purchages = []
            for order in orders:
                if order[8] not in spis_purchages:
                    spis_purchages.append(order[8])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                user_text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                num = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (order_num, purchage))
                orders = cursor.fetchall()
                for order in orders:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (order[1],))
                    price = cursor.fetchall()
                    text += f"{num}. –¢–æ–≤–∞—Ä {order[1]} **{order[2]}**. –ö–æ–ª-–≤–æ: {order[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ.\n"
                    user_text += f"{num}. –¢–æ–≤–∞—Ä {order[1]} **{order[2]}**. –ö–æ–ª-–≤–æ: {order[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ.\n"
                    cost += price[0][0] * order[3]
                    num += 1
            cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (2, orders[0][0]))
            connection.commit()
            text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            user_text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="\U00002705–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_all_order{orders[0][0]}")], [InlineKeyboardButton(text="\U00002611–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–∞—Å—Ç—å", callback_data=f"accept_part_order{orders[0][0]}")], [InlineKeyboardButton(text="\U0000274C–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"discard_order{orders[0][0]}")]])
            connection.close()
            await app.send_message(chat_id=1333967466, text=text, reply_markup=markup)
            await app.send_message(chat_id=993684230, text=text, reply_markup=markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text=user_text + "\n\nüìÖüöö–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /basket, –∞ –¥–∞–ª–µ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É", message_id=function_call.message.id)
        except:
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0000274C–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /basket", message_id=function_call.message.id)
    elif "discard_order" in function_call.data:
        num = (function_call.data)[13:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        if orders != []:
            text = f"\U0001F534\U0001F6D2–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Ññ`{num}`\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for order in orders:
                if order[5] not in spis_purchages:
                    spis_purchages.append(order[5])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                numm = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                orderss = cursor.fetchall()
                for orderr in orderss:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (orderr[1],))
                    price = cursor.fetchall()
                    text += f"{numm}. –¢–æ–≤–∞—Ä {orderr[1]} **{orderr[2]}**. –ö–æ–ª-–≤–æ: {orderr[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * orderr[3]}‚ÇΩ.\n"
                    cost += price[0][0] * orderr[3]
                    numm += 1
            text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            for order in orders:
                cursor.execute("SELECT book FROM Plants WHERE num = ?", (order[0],))
                book = cursor.fetchall()
                cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - order[2], order[0]))
            cursor.execute("DELETE FROM orders WHERE num = ?", (num,))
            connection.commit()
            await app.send_message(chat_id=orders[0][3], text=text)
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0001F534\U0001F6D2–ó–∞–∫–∞–∑ ‚Ññ`{num}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω—ë–Ω", message_id=function_call.message.id)
        else:
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", message_id=function_call.message.id)
        connection.close()
    elif "accept_part_order" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE num = ?", ((function_call.data)[17:],))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num < 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_redactt{order[0]}num{order[1]}")]
                    num += 1
                    markup.append(button)
            if len(orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_redact5num{(function_call.data)[17:]}")])
            markup.append([InlineKeyboardButton(text="\U00002705–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"end_accept_part{(function_call.data)[17:]}")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U00002699–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", message_id=function_call.message.id)
        connection.close()
    elif "info_redactt" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[12:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        button = []
        if order[0][2] > 1:
            button.append(InlineKeyboardButton(text="\U00002796", callback_data=f"minus_redactt{num_order}num{num_product}"))
        cursor.execute("SELECT count, price, book FROM Plants WHERE num = ?", (int(num_product),))
        count = cursor.fetchall()
        if (count[0][0] - count[0][2]) > 0:
            button.append(InlineKeyboardButton(text="\U00002795", callback_data=f"plus_redactt{num_order}num{num_product}"))
        markup = [button]
        markup.append([InlineKeyboardButton(text="\U0000274C–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_redactt{num_order}num{num_product}")])
        markup.append([InlineKeyboardButton(text="\U0001F519–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"accept_part_order{num_order}")])
        markup = InlineKeyboardMarkup(markup)
        connection.close()
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"**{order[0][1]}, {order[0][2]}—à—Ç. {order[0][2] * count[0][1]}‚ÇΩ\n\n–ó–∞–∫—É–ø–∫–∞: **{order[0][6]}**", reply_markup=markup, message_id=function_call.message.id)
    elif "plus_redactt" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[12:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        cursor.execute("UPDATE orders SET count = ? WHERE num = ? and product = ?", (order[0][2] + 1, int(num_order), int(num_product)))
        connection.commit()
        cursor.execute("SELECT book FROM Plants WHERE num = ?", (int(num_product),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] + 1, int(num_product)))
        connection.commit()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        button = []
        if order[0][2] > 1:
            button.append(InlineKeyboardButton(text="\U00002796", callback_data=f"minus_redactt{num_order}num{num_product}"))
        cursor.execute("SELECT count, price, book FROM Plants WHERE num = ?", (int(num_product),))
        count = cursor.fetchall()
        if (count[0][0] - count[0][2]) > 0:
            button.append(InlineKeyboardButton(text="\U00002795", callback_data=f"plus_redactt{num_order}num{num_product}"))
        markup = [button]
        connection.close()
        markup.append([InlineKeyboardButton(text="\U0000274C–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_redactt{num_order}num{num_product}")])
        markup.append([InlineKeyboardButton(text="\U0001F519–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"accept_part_order{num_order}")])
        markup = InlineKeyboardMarkup(markup)
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"**{order[0][1]}, {order[0][2]}—à—Ç. {order[0][2] * count[0][1]}‚ÇΩ\n\n–ó–∞–∫—É–ø–∫–∞: **{order[0][6]}**", reply_markup=markup, message_id=function_call.message.id)
    elif "minus_redactt" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[13:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        cursor.execute("UPDATE orders SET count = ? WHERE num = ? and product = ?", (order[0][2] - 1, int(num_order), int(num_product)))
        connection.commit()
        cursor.execute("SELECT book FROM Plants WHERE num = ?", (int(num_product),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - 1, int(num_product)))
        connection.commit()
        cursor.execute('SELECT num, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ? and product = ?', (int(num_order), int(num_product)))
        order = cursor.fetchall()
        button = []
        if order[0][2] > 1:
            button.append(InlineKeyboardButton(text="\U00002796", callback_data=f"minus_redactt{num_order}num{num_product}"))
        cursor.execute("SELECT count, price, book FROM Plants WHERE num = ?", (int(num_product),))
        count = cursor.fetchall()
        if (count[0][0] - count[0][2]) > 0:
            button.append(InlineKeyboardButton(text="\U00002795", callback_data=f"plus_redactt{num_order}num{num_product}"))
        markup = [button]
        connection.close()
        markup.append([InlineKeyboardButton(text="\U0000274C–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"delete_redactt{num_order}num{num_product}")])
        markup.append([InlineKeyboardButton(text="\U0001F519–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"accept_part_order{num_order}")])
        markup = InlineKeyboardMarkup(markup)
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"**{order[0][1]}, {order[0][2]}—à—Ç. {order[0][2] * count[0][1]}‚ÇΩ\n\n–ó–∞–∫—É–ø–∫–∞: **{order[0][6]}**", reply_markup=markup, message_id=function_call.message.id)
    elif "delete_redactt" in function_call.data:
        ind = (function_call.data).find("num")
        num_order = (function_call.data)[14:ind]
        num_product = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT count FROM orders WHERE num = ? and product = ?", (int(num_order), int(num_product)))
        count = cursor.fetchall()
        cursor.execute("SELECT book FROM Plants WHERE num = ?", (int(num_product),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - count[0][0], int(num_product)))
        connection.commit()
        cursor.execute("DELETE FROM orders WHERE num = ? and product = ?", (int(num_order), int(num_product)))
        connection.commit()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ?", (int(num_order),))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num < 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_redactt{order[0]}num{order[1]}")]
                    num += 1
                    markup.append(button)
            if len(orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_redact5num{num_order}")])
            markup.append([InlineKeyboardButton(text="\U00002705–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"end_accept_part{num_order}")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U00002699–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "next_redact" in function_call.data:
        ind = (function_call.data).find("num")
        next_b = (function_call.data)[11:ind]
        num_order = (function_call.data)[(ind + 3):]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status, purchage FROM orders WHERE num = ?", (num_order,))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num >= int(next_b) and num < int(next_b) + 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ\n\n–ó–∞–∫—É–ø–∫–∞: **{order[0][6]}**", callback_data=f"info_redactt{order[0]}num{order[1]}")]
                    markup.append(button)
                num += 1
            if int(next_b) >= 5:
                markup.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥\U000025C0", callback_data=f"next_redact{int(next_b) - 5}num{num_order}")])
            if len(orders) - int(next_b) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_redact{int(next_b) + 5}num{num_order}")])
            markup.append([InlineKeyboardButton(text="\U00002705–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"end_accept_part{(function_call.data)[14:]}")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U00002699–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif function_call.data == "add_delivery":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000203C–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n\n\U0000270F–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=markup, message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, add_lk_name)
    elif function_call.data == "my_orders":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        text = "\U0001F4E6–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
        cursor.execute("SELECT num, product_name, count, is_pay, status, product FROM orders WHERE customer_id = ?", (function_call.from_user.id,))
        orders = cursor.fetchall()
        spis_orders = []
        for order in orders:
            if order[0] not in spis_orders:
                spis_orders.append(order[0])
        if orders != []:
            for number in spis_orders:
                cursor.execute("SELECT num, product_name, count, is_pay, status, product, purchage FROM orders WHERE num = ?", (number,))
                ord = cursor.fetchall()
                text += f"\U0001F4CD**–ó–∞–∫–∞–∑ ‚Ññ{ord[0][0]}**:\n"
                ord_num = ord[0][0]
                if ord[0][3] == 1:
                    pay = "–û–ø–ª–∞—á–µ–Ω"
                else:
                    pay = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
                cursor.execute("SELECT price FROM Plants WHERE num = ?", (ord[0][5],))
                price = cursor.fetchall()
                if ord[0][4] == 1:
                    status = "–í –∫–æ—Ä–∑–∏–Ω–µ\U0001F6D2"
                elif ord[0][4] == 2:
                    status = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞\U0001F50E"
                elif ord[0][4] == 3:
                    status = "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\U0001F4B3"
                elif ord[0][4] == 4:
                    status = "–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã\U0001F551\U0001F4B5"
                elif ord[0][4] == 5:
                    status = "–û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\U0001F4E8"
                elif ord[0][4] == 6:
                    status = "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç\U00002705"
                text += f"**–û–ø–ª–∞—Ç–∞:** {pay}\n**–°—Ç–∞—Ç—É—Å:** {status}\n"
                spis_purchages = []
                for one_ord in ord:
                    if one_ord[6] not in spis_purchages:
                        spis_purchages.append(one_ord[6])
                cost = 0
                spis_purchages = sorted(spis_purchages)
                for purchage in spis_purchages:
                    text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                    num = 1
                    cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (ord_num, purchage))
                    ords = cursor.fetchall()
                    for one_ord in ords:
                        cursor.execute("SELECT price FROM Plants WHERE num = ?", (one_ord[1],))
                        price = cursor.fetchall()
                        text += f"{num}. –¢–æ–≤–∞—Ä {one_ord[1]} **{one_ord[2]}**. –ö–æ–ª-–≤–æ: {one_ord[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * one_ord[3]}‚ÇΩ.\n"
                        cost += price[0][0] * one_ord[3]
                        num += 1
                text += f"\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ\n\n"
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F4B5–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"pay_my_order")], [InlineKeyboardButton("\U0000274C–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"del_my_order")], [InlineKeyboardButton("\U0001F5F3\U00002699–ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", callback_data=f"change_recieve_order")], [InlineKeyboardButton(text="üìÖüöö–°—Ä–æ–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="delivery_time_account")], [InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"back_to_account")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=text, reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"back_to_account")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F4E6\U0001F5D1–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—É—Å—Ç", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif function_call.data == "back_to_account":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (function_call.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**.\n\n\U00002139–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n**–§–ò–û**: {user[0][1]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {user[0][2]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {user[0][3]}"
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07"
        await app.edit_message_text(chat_id=function_call.from_user.id, text=text, reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif function_call.data == "change_my_data":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        await app.send_message(chat_id=function_call.from_user.id, text="\U0000203C–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω—É–∂–Ω–∞ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n\n\U0000270F–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, add_lk_name)
    elif function_call.data == "del_my_order":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and is_pay IS NULL", (function_call.from_user.id,))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            spis_orders = []
            for order in orders:
                if order[0] not in spis_orders:
                    spis_orders.append(order[0])
            spis_orders = sorted(spis_orders)
            for ord in spis_orders:
                if num < 5:
                    button = [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{ord}", callback_data=f"delete_order{ord}")]
                    num += 1
                    markup.append(button)
            if len(spis_orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"delete_next_order5")])
            markup.append([InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.\n\n–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "delete_next_order" in function_call.data:
        next_b = (function_call.data)[17:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and is_pay IS NULL", (function_call.from_user.id,))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            spis_orders = []
            for order in orders:
                if order[0] not in spis_orders:
                    spis_orders.append(order[0])
            spis_orders = sorted(spis_orders)
            for ord in spis_orders:
                if num >= int(next_b) and num < int(next_b) + 5:
                    button = [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{ord}", callback_data=f"delete_order{ord}")]
                    markup.append(button)
                num += 1
            if int(next_b) >= 5:
                markup.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥\U000025C0", callback_data=f"delete_next_order{int(next_b) - 5}")])
            if len(spis_orders) - int(next_b) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"delete_next_order{int(next_b) + 5}")])
            markup.append([InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑.\n\n–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif "delete_order" in function_call.data:
        num = (function_call.data)[12:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, reciept, is_pay FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        for order in orders:
            cursor.execute("SELECT book FROM Plants WHERE num = ?", (order[1],))
            count = cursor.fetchall()
            cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (count[0][0] - order[3], order[1]))
            connection.commit()
        cursor.execute("DELETE FROM orders WHERE num = ?", (num,))
        connection.commit()
        connection.close()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"back_to_account")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U00002705–ó–∞–∫–∞–∑ ‚Ññ`{orders[0][0]}` —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=markup, message_id=function_call.message.id)
    elif "accept_all_order" in function_call.data:
        num = (function_call.data)[16:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        if orders != []:
            cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (3, num))
            connection.commit()
            text = f"\U00002714–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫–∞–∑ ‚Ññ`{num}`\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for order in orders:
                if order[5] not in spis_purchages:
                    spis_purchages.append(order[5])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                number = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                orders = cursor.fetchall()
                for order in orders:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (order[1],))
                    price = cursor.fetchall()
                    text += f"{number}. –¢–æ–≤–∞—Ä {order[1]} **{order[2]}**. –ö–æ–ª-–≤–æ: {order[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ.\n"
                    cost += price[0][0] * order[3]
                    number += 1
            text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            cursor.execute("SELECT card_data FROM Payment")
            card_data = cursor.fetchall()
            text += f"\n\n\U0001F4B3–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n{card_data[0][0]}"
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"buy_done{num}")], [InlineKeyboardButton("\U0000274C–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–ø–ª–∞—Ç—ã", callback_data=f"buy_user_reject{num}")]])
            await app.send_message(chat_id=orders[0][4], text=text, reply_markup=markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0001F4E8–ó–∞–∫–∞–∑ ‚Ññ`{num}` –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\U00002705", message_id=function_call.message.id)
        else:
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", message_id=function_call.message.id)
        connection.close()
    elif "end_accept_part" in function_call.data:
        num = (function_call.data)[15:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        if orders != []:
            cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (3, num))
            connection.commit()
            text = f"\U00002714\U0000203C–ü—Ä–æ–¥–∞–≤–µ—Ü –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∑–∞–∫–∞–∑–∞ ‚Ññ`{num}`\n\n\U0001F4E6–ù–æ–≤—ã–π —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for order in orders:
                if order[5] not in spis_purchages:
                    spis_purchages.append(order[5])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                number = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                orders = cursor.fetchall()
                for order in orders:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (order[1],))
                    price = cursor.fetchall()
                    text += f"{number}. –¢–æ–≤–∞—Ä {order[1]} **{order[2]}**. –ö–æ–ª-–≤–æ: {order[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ.\n"
                    cost += price[0][0] * order[3]
                    number += 1
            text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            text += f"\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω—É –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏\U00002B07"
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ù–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"pay_begin{num}")], [InlineKeyboardButton("\U0001F519\U0001F6D2–í–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"back_to_basket{num}")]])
            await app.send_message(chat_id=orders[0][4], text=text, reply_markup=markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0001F4E8–ó–∞–∫–∞–∑ ‚Ññ{num} —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω\U00002705", message_id=function_call.message.id)
        else:
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", message_id=function_call.message.id)
        connection.close()
    elif "back_to_basket" in function_call.data:
        num = (function_call.data)[14:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT product, count FROM orders WHERE num = ?", (num,))
        products = cursor.fetchall()
        for product in products:
            cursor.execute("SELECT num, count FROM orders WHERE customer_id = ? and status = ? and product = ?", (function_call.from_user.id, 1, product[0]))
            count = cursor.fetchall()
            if count != []:
                cursor.execute("UPDATE orders SET count = ? WHERE num = ?", (count[0][1] + product[1], count[0][0]))
                cursor.execute("DELETE FROM orders WHERE num = ? and product = ?", (num, product[0]))
                connection.commit()
        cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (1, num))
        connection.commit()
        cursor.execute("SELECT customer_id FROM orders WHERE num = ?", (num,))
        cust_id = cursor.fetchall()
        cursor.execute("UPDATE orders SET num = ? WHERE status = ? and customer_id = ?", (num, 1, cust_id[0][0]))
        connection.commit()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 1))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            for order in orders:
                if num < 5:
                    cursor.execute("SELECT count, price FROM Plants WHERE num = ?", (order[1], ))
                    osts = cursor.fetchall()
                    button = [InlineKeyboardButton(text=f"{order[2]}, {order[3]}—à—Ç. {order[3] * osts[0][1]}‚ÇΩ", callback_data=f"info_product{order[0]}num{order[1]}")]
                    num += 1
                    markup.append(button)
            if len(orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"next_basket5")])
            markup.append([InlineKeyboardButton(text="\U00002705–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑\U00002705", callback_data="new_order")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0000203C–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫—É–ø–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏\n\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–æ–∫–æ–π\U0001F447", reply_markup=markup, message_id=function_call.message.id)
        else:
            await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
            await app.send_message(chat_id=function_call.from_user.id, text="\U0001F6D2**–ö–æ—Ä–∑–∏–Ω–∞**\n\n\U0001F5D1–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\U0001F4AC")
        connection.close()
    elif "pay_begin" in function_call.data:
        num = (function_call.data)[9:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        if orders != []:
            cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (3, num))
            connection.commit()
            text = f"\U0001F7E2\U0001F4B3–í—ã –Ω–∞—á–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ ‚Ññ`{num}`\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for order in orders:
                if order[5] not in spis_purchages:
                    spis_purchages.append(order[5])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                number = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                orders = cursor.fetchall()
                for order in orders:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (order[1],))
                    price = cursor.fetchall()
                    text += f"{number}. –¢–æ–≤–∞—Ä {order[1]} **{order[2]}**. –ö–æ–ª-–≤–æ: {order[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ.\n"
                    cost += price[0][0] * order[3]
                    number += 1
            text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            cursor.execute("SELECT card_data FROM Payment")
            card_data = cursor.fetchall()
            text += f"\n\n\U0001F4B3–û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:\n{card_data[0][0]}"
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"buy_done{num}")], [InlineKeyboardButton("\U0000274C–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –æ–ø–ª–∞—Ç—ã", callback_data=f"buy_user_reject{num}")]])
            await app.edit_message_text(chat_id=orders[0][4], text=text, reply_markup=markup, message_id=function_call.message.id)
        else:
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", message_id=function_call.message.id)
        connection.close()
    elif "buy_user_reject" in function_call.data:
        num = (function_call.data)[15:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        if orders != []:
            text = f"\U0001F534\U0001F6D2–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ‚Ññ`{num}`\n\n\U0000274C–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for order in orders:
                if order[5] not in spis_purchages:
                    spis_purchages.append(order[5])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                number = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                orderss = cursor.fetchall()
                for orderr in orderss:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (orderr[1],))
                    price = cursor.fetchall()
                    text += f"{number}. –¢–æ–≤–∞—Ä {orderr[1]} **{orderr[2]}**. –ö–æ–ª-–≤–æ: {orderr[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * orderr[3]}‚ÇΩ.\n"
                    cost += price[0][0] * orderr[3]
                    number += 1
            text += f"\n\U0001F4B5–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ"
            for order in orders:
                cursor.execute("SELECT book FROM Plants WHERE num = ?", (order[0],))
                book = cursor.fetchall()
                cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - order[2], order[0]))
            cursor.execute("DELETE FROM orders WHERE num = ?", (num,))
            connection.commit()
            await app.edit_message_text(chat_id=function_call.from_user.id, text=text, message_id=function_call.message.id)
        else:
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –í—ã —É–∂–µ –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤", message_id=function_call.message.id)
        connection.close()
    elif "buy_done" in function_call.data:
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F4CE–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ —Å–∞–º —á–µ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, buy_done, kwargs={"num": int((function_call.data)[8:])})
    elif "buy_reject" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (int(function_call.data[10:]),))
        orders = cursor.fetchall()
        num = int(function_call.data[10:])
        if orders != []:
            text = f"\U0001F534\U0001F6D2–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ`{int(function_call.data[10:])}` –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for order in orders:
                if order[6] not in spis_purchages:
                    spis_purchages.append(order[6])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                number = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                orderss = cursor.fetchall()
                for orderr in orderss:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (orderr[1],))
                    price = cursor.fetchall()
                    text += f"{number}. –¢–æ–≤–∞—Ä {orderr[1]} **{orderr[2]}**. –ö–æ–ª-–≤–æ: {orderr[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * orderr[3]}‚ÇΩ.\n"
                    cost += price[0][0] * orderr[3]
                    number += 1
            text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
            for order in orders:
                cursor.execute("SELECT book FROM Plants WHERE num = ?", (order[1],))
                count = cursor.fetchall()
                cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (count[0][0] - order[3], order[1]))
            connection.commit()
            await app.send_message(chat_id=orders[0][4], text=text)
            cursor.execute("DELETE FROM orders WHERE num = ?", (int(function_call.data[10:]),))
            connection.commit()
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0001F534\U00002705–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ`{orders[0][0]}` –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.\n\n\U0001F464–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {orders[0][5]}", message_id=function_call.message.id)
        else:
            await app.send_message(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        connection.close()
    elif "buy_confirm" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name FROM orders WHERE num = ?", (int(function_call.data[11:]),))
        order = cursor.fetchall()
        for ord in order:
            cursor.execute("SELECT ordered FROM Plants WHERE num = ?", (ord[1],))
            count = cursor.fetchall()
            cursor.execute("UPDATE Plants SET ordered = ? WHERE num = ?", (count[0][0] + ord[3], ord[1]))
        connection.commit()
        if order != []: 
            cursor.execute("UPDATE orders SET is_pay = ?, status = ? WHERE num = ?", (True, 5, int(function_call.data[11:])))
            connection.commit()
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0001F7E2\U00002705–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}` —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—à–µ–Ω—ã\n\n\U0001F464–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º: {order[0][5]}", message_id=function_call.message.id)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", callback_data=f"send_post{int(function_call.data[11:])}")], [InlineKeyboardButton("–°–î–≠–ö", callback_data=f"send_sdek{int(function_call.data[11:])}")], [InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data=f"send_sam{int(function_call.data[11:])}")]])
            await app.send_message(chat_id=order[0][4], text=f"\U00002714–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}` –ø–æ–¥—Ç—Ä–µ–∂–¥–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.\n\n\U00002709–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", reply_markup=markup)
        else:
            await app.send_message(chat_id=function_call.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
        connection.close()
    elif "send_post" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("UPDATE orders SET is_post = ? WHERE num = ?", ((function_call.data)[5:9], int(function_call.data[9:])))
        connection.commit()
        if "send_post" in function_call.data:
            send = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        elif "send_sdek" in function_call.data:
            send = "–°–î–≠–ö"
        cursor.execute("SELECT id, name, adress, telephone from Users WHERE id = ?", (function_call.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"first_post{int(function_call.data[9:])}")], [InlineKeyboardButton("–û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"secnd_post{int(function_call.data[9:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_back_type{int(function_call.data[9:])}")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: **{send}**\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞\U0001F4EC", message_id=function_call.message.id, reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"send_name{int(function_call.data[9:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_back_type{int(function_call.data[9:])}")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: **{send}**\n\n\U0001F4CD–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n\n\U0001F4DD–ß—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /account\U00002B07", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif "first_post" in function_call.data or "secnd_post" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        if "first_post" in function_call.data:
            word_send = "—É—Å–∫–æ—Ä–µ–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É"
            type_send = 1
        elif "secnd_post" in function_call.data:
            type_send = 0
            word_send = "–æ–±—ã—á–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É"
        cursor.execute("UPDATE orders SET class = ? WHERE num = ?", (type_send, int(function_call.data[10:])))
        connection.commit()
        cursor.execute("SELECT id, name, adress, telephone from Users WHERE id = ?", (function_call.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F464–í–∑—è—Ç—å –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞", callback_data=f"use_data{int(function_call.data[10:])}")], [InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"send_name{int(function_call.data[10:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_post{int(function_call.data[10:])}")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ **{word_send}**\n\n\U0001F4CD–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é\U00002B07", message_id=function_call.message.id, reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"send_name{int(function_call.data[10:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_back_type{int(function_call.data[10:])}")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: **{send}**\n\n\U0001F4CD–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n\n\U0001F4DD–ß—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /account\U00002B07", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif "send_sdek" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("UPDATE orders SET is_post = ? WHERE num = ?", ((function_call.data)[5:9], int(function_call.data[9:])))
        connection.commit()
        if "send_post" in function_call.data:
            send = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        elif "send_sdek" in function_call.data:
            send = "–°–î–≠–ö"
        cursor.execute("SELECT id, name, adress, telephone from Users WHERE id = ?", (function_call.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F464–í–∑—è—Ç—å –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞", callback_data=f"use_data{int(function_call.data[9:])}")], [InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"send_name{int(function_call.data[9:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_back_type{int(function_call.data[9:])}")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: **{send}**\n\n\U0001F4CD–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏—Ö –≤—Ä—É—á–Ω—É—é\U00002B07", message_id=function_call.message.id, reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"send_name{int(function_call.data[9:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_back_type{int(function_call.data[9:])}")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: **{send}**\n\n\U0001F4CD–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n\n\U0001F4DD–ß—Ç–æ–±—ã –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–µ –≤–≤–æ–¥–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /account\U00002B07", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif "send_sam" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("UPDATE orders SET is_post = ? WHERE num = ?", ("sam", int(function_call.data[8:])))
        connection.commit()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"send_data{int(function_call.data[8:])}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_back_type{int(function_call.data[8:])}")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: **–°–∞–º–æ–≤—ã–≤–æ–∑**", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "use_data" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (function_call.from_user.id,))
        user = cursor.fetchall()
        cursor.execute("UPDATE orders SET name = ?, adress = ?, telephone = ? WHERE num = ?", (user[0][1], user[0][2], user[0][3], int(function_call.data[8:])))
        connection.commit()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, class FROM orders WHERE num = ?", (int(function_call.data[8:]),))
        order = cursor.fetchall() 
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U00002705–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ`{order[0][0]}` –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", message_id=function_call.message.id)
        cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (6, int(function_call.data[8:])))
        connection.commit()
        if order[0][6] == "post":
            send = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        elif order[0][6] == "sdek":
            send = "–°–î–≠–ö"
        else:
            send = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        if order[0][6] == "post":
            if order[0][10] == 1:
                word_send = "**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
            else:
                word_send = "**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: –û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
        else:
            word_send = ""
        if send != "–°–∞–º–æ–≤—ã–≤–æ–∑":
            await app.send_message(chat_id=993684230, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}\n{word_send}**–§–ò–û**: {order[0][7]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {order[0][8]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {order[0][9]}")
            await app.send_message(chat_id=1333967466, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}\n{word_send}**–§–ò–û**: {order[0][7]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {order[0][8]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {order[0][9]}")
        else:
            await app.send_message(chat_id=1333967466, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}")
            await app.send_message(chat_id=993684230, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}")
        connection.close()
    elif "send_back_type" in function_call.data:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", callback_data=f"send_post{int(function_call.data[14:])}")], [InlineKeyboardButton("–°–î–≠–ö", callback_data=f"send_sdek{int(function_call.data[14:])}")], [InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data=f"send_sam{int(function_call.data[14:])}")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U00002709–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", message_id=function_call.message.id, reply_markup=markup)
    elif "send_name" in function_call.data:
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, send_name, kwargs={"num": int((function_call.data)[9:])})
    elif "send_adress" in function_call.data:
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, send_adress, kwargs={"num": int((function_call.data)[11:])})
    elif "send_phone" in function_call.data:
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F4CE–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)]], resize_keyboard=True)
        await app.send_message(chat_id=function_call.from_user.id, text="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π\U00002B07", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, send_phone, kwargs={"num": int((function_call.data)[10:])})
    elif "send_data" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, class FROM orders WHERE num = ?", (int(function_call.data[9:]),))
        order = cursor.fetchall() 
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U00002705–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ`{order[0][0]}` –ø–µ—Ä–µ–¥–∞–Ω—ã –ø—Ä–æ–¥–∞–≤—Ü—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è", message_id=function_call.message.id)
        cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (6, int(function_call.data[9:])))
        connection.commit()
        if order[0][6] == "post":
            send = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        elif order[0][6] == "sdek":
            send = "–°–î–≠–ö"
        else:
            send = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        if order[0][6] == "post":
            if order[0][10] == 1:
                word_send = "**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
            else:
                word_send = "**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: –û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
        else:
            word_send = ""
        if send != "–°–∞–º–æ–≤—ã–≤–æ–∑":
            await app.send_message(chat_id=1333967466, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}\n{word_send}**–§–ò–û**: {order[0][7]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {order[0][8]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {order[0][9]}")
            await app.send_message(chat_id=993684230, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}\n{word_send}**–§–ò–û**: {order[0][7]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {order[0][8]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {order[0][9]}")
        else:
            await app.send_message(chat_id=1333967466, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}")
            await app.send_message(chat_id=993684230, text=f"\U0001F4E4–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {order[0][5]} –ø—Ä–∏—Å–ª–∞–ª –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ`{order[0][0]}`\n\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏**: {send}")
        connection.close()
    elif function_call.data == "change_recieve_order":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and is_pay = ?", (function_call.from_user.id, 1))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            spis_orders = []
            for order in orders:
                if order[0] not in spis_orders:
                    spis_orders.append(order[0])
            spis_orders = sorted(spis_orders)
            for ord in spis_orders:
                if num < 5:
                    button = [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{ord}", callback_data=f"change_order{ord}")]
                    num += 1
                    markup.append(button)
            if len(spis_orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"change_next_order5")])
            markup.append([InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n\n–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "change_next_order" in function_call.data:
        next_b = (function_call.data)[17:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and is_pay = ?", (function_call.from_user.id, 1))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            spis_orders = []
            for order in orders:
                if order[0] not in spis_orders:
                    spis_orders.append(order[0])
            spis_orders = sorted(spis_orders)
            for ord in spis_orders:
                if num >= int(next_b) and num < int(next_b) + 5:
                    button = [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{ord}", callback_data=f"change_order{ord}")]
                    markup.append(button)
                num += 1
            if int(next_b) >= 5:
                markup.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥\U000025C0", callback_data=f"change_next_order{int(next_b) - 5}")])
            if len(spis_orders) - int(next_b) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"change_next_order{int(next_b) + 5}")])
            markup.append([InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0000270F–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞\n\n–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif "change_order" in function_call.data:
        num = (function_call.data)[12:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, reciept, is_pay FROM orders WHERE num = ?", (num,))
        orders = cursor.fetchall()
        cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (5, num))
        connection.commit()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", callback_data=f"send_post{num}")], [InlineKeyboardButton("–°–î–≠–ö", callback_data=f"send_sdek{num}")], [InlineKeyboardButton("–°–∞–º–æ–≤—ã–≤–æ–∑", callback_data=f"send_sam{num}")]])
        await app.send_message(chat_id=function_call.from_user.id, text=f"\U00002709–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n\U0000203C–ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –ø–æ—á—Ç–æ–π –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –ø–æ—á—Ç—ã –†–æ—Å—Å–∏–∏. –û–ø–ª–∞—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–º –∂–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º. –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –°–î–≠–ö–æ–º –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –£–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞) 100‚ÇΩ", reply_markup=markup)
        connection.close()
    elif function_call.data == "pay_my_order":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 3))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            spis_orders = []
            for order in orders:
                if order[0] not in spis_orders:
                    spis_orders.append(order[0])
            spis_orders = sorted(spis_orders)
            for ord in spis_orders:
                if num < 5:
                    button = [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{ord}", callback_data=f"pay_begin{ord}")]
                    num += 1
                    markup.append(button)
            if len(spis_orders) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"do_pay_next_order5")])
            markup.append([InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F4B5–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F4B5–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∑–∞–∫–∞–∑\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", reply_markup=markup, message_id=function_call.message.id)
        connection.close()
    elif "do_pay_next_order" in function_call.data:
        next_b = (function_call.data)[17:]
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, is_pay, status FROM orders WHERE customer_id = ? and status = ?", (function_call.from_user.id, 3))
        orders = cursor.fetchall()
        if orders != []:
            markup = []
            num = 0
            spis_orders = []
            for order in orders:
                if order[0] not in spis_orders:
                    spis_orders.append(order[0])
            spis_orders = sorted(spis_orders)
            for ord in spis_orders:
                if num >= int(next_b) and num < int(next_b) + 5:
                    button = [InlineKeyboardButton(text=f"–ó–∞–∫–∞–∑ ‚Ññ{ord}", callback_data=f"pay_begin{ord}")]
                    markup.append(button)
                num += 1
            if int(next_b) >= 5:
                markup.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥\U000025C0", callback_data=f"do_pay_next_order{int(next_b) - 5}")])
            if len(spis_orders) - int(next_b) > 5:
                markup.append([InlineKeyboardButton(text="–î–∞–ª–µ–µ\U000025B6", callback_data=f"do_pay_next_order{int(next_b) + 5}")])
            markup.append([InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")])
            markup = InlineKeyboardMarkup(markup)
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F4B5–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å\U00002B07", reply_markup=markup, message_id=function_call.message.id)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F4B5–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∑–∞–∫–∞–∑\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–º –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif function_call.data == "delivery_time" or function_call.data == "delivery_time_account":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT time1, time2, time3, time4, time5, name FROM purchages")
        purchages = cursor.fetchall()
        time_text = ""
        for purchage in purchages:
            time_text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage[5]}**\n\U0001F4CD**–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0]}\n\U0001F4CD**–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É:** {purchage[1]}\n\U0001F4CD**–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** {purchage[2]}\n\U0001F4CD**–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[3]}\n\U0001F4CD**–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[4]}\n\n"
        connection.close()
        if function_call.data == "delivery_time":
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"basket")]])
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"my_orders")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text=time_text, reply_markup=markup, message_id=function_call.message.id)
    elif "ord_tble_purchage" in function_call.data:
        name_purchage = (function_call.data)[17:]
        await app.edit_message_text(chat_id=function_call.from_user.id, text=f"\U0001F551–°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{name_purchage}**", message_id=function_call.message.id)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, name FROM Plants")
        plants = cursor.fetchall()
        head = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ó–∞–∫—É–ø–∫–∞", "–û–ø–ª–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "ID –∑–∞–∫–∞–∑—á–∏–∫–∞", "–ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞", "–î–æ—Å—Ç–∞–≤–∫–∞", "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", "–§–ò–û", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–¢–µ–ª–µ—Ñ–æ–Ω"]
        plants_nums = []
        for plant in plants:
            head.append(plant[1])
            plants_nums.append(plant[0])
        cursor.execute("SELECT num FROM orders WHERE purchage = ? ORDER BY num", (name_purchage,))
        nums = cursor.fetchall()
        spis_nums = []
        data = []
        spis_ids = []
        for num in nums:
            if num[0] not in spis_nums:
                spis_nums.append(num[0])
                cursor.execute("SELECT * FROM orders WHERE num = ? and purchage = ?", (num[0], name_purchage))
                orders = cursor.fetchall()
                if orders[0][5] not in spis_ids:
                    spis_ids.append(orders[0][5])
                    datapr = []
                    cursor.execute("SELECT * FROM orders WHERE num = ? ORDER BY purchage", (num[0],))
                    spis_num_need = cursor.fetchall()
                    need_num = 1
                    for spis_need_num_one in spis_num_need:
                        if spis_need_num_one[1] == name_purchage:
                            break
                        need_num += 1
                    flag = False
                    for spis_need_num_one in spis_num_need:
                        if spis_need_num_one[1] != name_purchage:
                            flag = True
                    if flag == True:
                        datapr.append(str(orders[0][0]) + "." + str(need_num))
                    else:
                        datapr.append(str(orders[0][0]))
                    datapr.append(name_purchage)
                    datapr.append(orders[0][7])
                    if orders[0][13] == 1:
                        datapr.append("–í –∫–æ—Ä–∑–∏–Ω–µ")
                    elif orders[0][13] == 2:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞")
                    elif orders[0][13] == 3:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
                    elif orders[0][13] == 4:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã")
                    elif orders[0][13] == 5:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    elif orders[0][13] == 6:
                        datapr.append("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
                    datapr.append(orders[0][5])
                    datapr.append(orders[0][6])
                    datapr.append(orders[0][8])
                    if orders[0][7] == "post":
                        if orders[0][13] == 1:
                            word_send = "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è"
                        else:
                            word_send = "–û–±—ã—á–Ω–∞—è"
                    else:
                        word_send = "-"
                    datapr.append(word_send)
                    datapr.append(orders[0][9])
                    datapr.append(orders[0][10])
                    datapr.append(orders[0][11])
                    product = {}
                    for order in orders:
                        product[f"{order[2]}"] = order[4]
                    for plant in plants_nums:
                        count = product.get(f"{plant}")
                        datapr.append(count)
                    cursor.execute("SELECT * FROM orders WHERE customer_id = ? and purchage = ?", (orders[0][5], name_purchage))
                    orders_id = cursor.fetchall()
                    data.append(datapr)
                    spis_nums_id = []
                    for order_id in orders_id:
                        if order_id[0] != num[0] and order_id[0] not in spis_nums_id:
                            spis_nums_id.append(order_id[0])
                            cursor.execute("SELECT * FROM orders WHERE num = ? and purchage = ?", (order_id[0], name_purchage))
                            orders_one_id = cursor.fetchall()
                            datapr = []
                            cursor.execute("SELECT * FROM orders WHERE num = ? ORDER BY purchage", (order_id[0],))
                            spis_num_need = cursor.fetchall()
                            need_num = 1
                            for spis_need_num_one in spis_num_need:
                                if spis_need_num_one[1] == name_purchage:
                                    break
                                need_num += 1
                            flag = False
                            for spis_need_num_one in spis_num_need:
                                if spis_need_num_one[1] != name_purchage:
                                    flag = True
                            if flag == True:
                                datapr.append(str(orders_one_id[0][0]) + "." + str(need_num))
                            else:
                                datapr.append(str(orders_one_id[0][0]))
                            datapr.append(name_purchage)
                            datapr.append(orders_one_id[0][7])
                            if orders_one_id[0][13] == 1:
                                datapr.append("–í –∫–æ—Ä–∑–∏–Ω–µ")
                            elif orders_one_id[0][13] == 2:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞")
                            elif orders_one_id[0][13] == 3:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
                            elif orders_one_id[0][13] == 4:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã")
                            elif orders_one_id[0][13] == 5:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                            elif orders_one_id[0][13] == 6:
                                datapr.append("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
                            datapr.append(orders_one_id[0][5])
                            datapr.append(orders_one_id[0][6])
                            datapr.append(orders_one_id[0][8])
                            if orders_one_id[0][7] == "post":
                                if orders_one_id[0][13] == 1:
                                    word_send = "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è"
                                else:
                                    word_send = "–û–±—ã—á–Ω–∞—è"
                            else:
                                word_send = "-"
                            datapr.append(word_send)
                            datapr.append(orders_one_id[0][9])
                            datapr.append(orders_one_id[0][10])
                            datapr.append(orders_one_id[0][11])
                            product = {}
                            for order_one in orders_one_id:
                                product[f"{order_one[2]}"] = order_one[4]
                            for plant in plants_nums:
                                count = product.get(f"{plant}")
                                datapr.append(count)
                            data.append(datapr)
        wb = Workbook()
        ws = wb.active
        ws.append(head)
        for i in range(len(data)):
            ws.append(data[i])
        for i in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            ws[f'{i}1'].font = Font(bold=True)
        ws[f'AA1'].font = Font(bold=True)
        ws.column_dimensions['A'].width = 15
        ws.column_dimensions['B'].width = 25
        ws.column_dimensions['D'].width = 40
        ws.column_dimensions['E'].width = 15
        ws.column_dimensions['F'].width = 20
        ws.column_dimensions['H'].width = 20
        ws.column_dimensions['I'].width = 50
        ws.column_dimensions['J'].width = 40
        ws.column_dimensions['K'].width = 20
        ws.column_dimensions['L'].width = 20
        ws.column_dimensions['M'].width = 20
        ws.column_dimensions['N'].width = 20
        ws.column_dimensions['O'].width = 20
        ws.column_dimensions['P'].width = 20
        ws.column_dimensions['Q'].width = 20
        ws.column_dimensions['R'].width = 20
        ws.column_dimensions['S'].width = 20
        ws.column_dimensions['T'].width = 20
        ws.column_dimensions['U'].width = 20
        ws.column_dimensions['V'].width = 20
        ws.column_dimensions['W'].width = 20
        ws.column_dimensions['X'].width = 20
        ws.column_dimensions['Y'].width = 20
        ws.column_dimensions['Z'].width = 20
        ws.column_dimensions['AA'].width = 20
        ws.column_dimensions['AB'].width = 20
        ws.column_dimensions['AC'].width = 20
        ws.column_dimensions['AD'].width = 20
        ws.column_dimensions['AE'].width = 20
        ws.column_dimensions['AF'].width = 20
        ws.column_dimensions['AG'].width = 20
        for col in ws.columns:
            for cell in col:
                alignment_obj = copy(cell.alignment)
                alignment_obj.horizontal = 'center'
                alignment_obj.vertical = 'center'
                cell.alignment = alignment_obj
        connection.close()
        wb.save(f"C:/Users/Administrator/My_bots/Botanica_club_bot/{name_purchage}.xlsx")
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
        await app.send_document(chat_id=function_call.from_user.id, document=f"C:/Users/Administrator/My_bots/Botanica_club_bot/{name_purchage}.xlsx", reply_markup=markup)
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
    elif function_call.data == "exit_table2":
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002699–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏", callback_data=f"red_table_orders")], [InlineKeyboardButton("\U0001F69B–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫—É–ø–∫–∞–º–∏", callback_data=f"admin_purchage")], [InlineKeyboardButton("\U0000270F–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"admin_table")], [InlineKeyboardButton("\U0001F440–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤", callback_data=f"view_table")]])
        await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
        await app.send_message(chat_id=function_call.from_user.id, text="\U00002699–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07", reply_markup=markup)
    elif function_call.data == "add_admin_order":
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F7E2\U0001F195–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–¢–µ–ª–µ—Ñ–æ–Ω - –Æ–∑–µ—Ä–Ω–µ–π–º –≤ Telegram - –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è - –§–ò–û - –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: +79163456789 - @example - –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á - –≥. –ü—Ä–∏–º–µ—Ä–Ω—ã–π, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –∫–≤. 1", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, add_admin_order)
    elif "new_product" in function_call.data:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT telephone, customer_name, is_post, name, adress FROM orders WHERE num = ?", ((function_call.data)[11:],))
        order = cursor.fetchall()
        connection.close()
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U00002795–î–æ–±–∞–≤—å—Ç–µ –≤ –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: 2 - 4", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, new_product, kwargs={"telephone": order[0][0], "username": order[0][1], "is_post": order[0][2], "name": order[0][3], "adress": order[0][4]})
    elif "save_admin_order" in function_call.data:
        num = (function_call.data)[16:]
        num = int(num)
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("UPDATE orders SET status = ? WHERE num = ?", (6, num))
        connection.commit()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, reciept, is_pay, purchage FROM orders WHERE num = ?", (num,))
        order = cursor.fetchall()
        if order != []:
            send = order[0][6]
            if order[0][11] == True:
                money = "–û–ø–ª–∞—á–µ–Ω"
            else:
                money = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
            if order[0][11] == True:
                text = f"\U00002705–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n\n**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {order[0][0]}\n**–ó–∞–∫–∞–∑—á–∏–∫:** {order[0][5]}\n**–û–ø–ª–∞—Ç–∞:** {money}\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:** {send}\n**–§–ò–û –∑–∞–∫–∑–∞—á–∏–∫–∞:** {order[0][7]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:** {order[0][8]}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** {order[0][9]}\n\n**–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:**\n"
                spis_purchages = []
                for ord in order:
                    if ord[12] not in spis_purchages:
                        spis_purchages.append(ord[12])
                cost = 0
                spis_purchages = sorted(spis_purchages)
                for purchage in spis_purchages:
                    text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                    number = 1
                    cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                    orderss = cursor.fetchall()
                    for ordd in orderss:
                        cursor.execute("SELECT price FROM Plants WHERE num = ?", (ordd[1],))
                        price = cursor.fetchall()
                        text += f"{number}. –¢–æ–≤–∞—Ä {ordd[1]} **{ordd[2]}**. –ö–æ–ª-–≤–æ: {ordd[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * ordd[3]}‚ÇΩ.\n"
                        cost += price[0][0] * ordd[3]
                        number += 1
                text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
                text = text.replace("None", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.edit_message_text(chat_id=function_call.from_user.id, text=text, message_id=function_call.message.id, reply_markup=markup)
        connection.close()
    elif function_call.data == "view_order":
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F440–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, view_order)
    elif function_call.data == "del_order":
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U00002716–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è", message_id=function_call.message.id)
        await pyrostep.register_next_step(function_call.from_user.id, del_order)
    elif function_call.data == "delete_unpay":
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num FROM orders")
        nums = cursor.fetchall()
        spis_nums = []
        for num in nums:
            if num[0] not in spis_nums:
                spis_nums.append(num[0])
                cursor.execute("SELECT num, product, product_name, customer_id, is_pay, count, purchage FROM orders WHERE num = ?", (num[0],))
                orders = cursor.fetchall()
                if orders[0][4] == None:
                    num = 1
                    text=f"\U0001F534\U0001F6D2–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ`{orders[0][0]}` —É–¥–∞–ª—ë–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: \U0000274C—Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã –∏—Å—Ç—ë–∫\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
                    spis_purchages = []
                    cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ?", (orders[0][0],))
                    order = cursor.fetchall()
                    for ord in order:
                        if ord[8] not in spis_purchages:
                            spis_purchages.append(ord[8])
                    cost = 0
                    spis_purchages = sorted(spis_purchages)
                    for purchage in spis_purchages:
                        text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                        number = 1
                        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (orders[0][0], purchage))
                        orderss = cursor.fetchall()
                        for ordd in orderss:
                            cursor.execute("SELECT price FROM Plants WHERE num = ?", (ordd[1],))
                            price = cursor.fetchall()
                            text += f"{number}. –¢–æ–≤–∞—Ä {ordd[1]} **{ordd[2]}**. –ö–æ–ª-–≤–æ: {ordd[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * ordd[3]}‚ÇΩ.\n"
                            cost += price[0][0] * ordd[3]
                            number += 1
                    text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
                    await app.send_message(chat_id=orders[0][3], text=text)
                    cursor.execute("DELETE FROM orders WHERE num = ?", (orders[0][0],))
                    connection.commit()
                    cursor.execute("SELECT book FROM Plants WHERE num = ?", (orders[0][1],))
                    book = cursor.fetchall()
                    cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] - orders[0][5], orders[0][1]))
                    connection.commit()
            else:
                continue
        connection.close()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.edit_message_text(chat_id=function_call.from_user.id, text="\U0001F534\U0001F4B8–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã", message_id=function_call.message.id, reply_markup=markup)

async def del_order(client, message):
    if (message.text).isdigit():
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, reciept, is_pay, purchage FROM orders WHERE num = ?", (int(message.text),))
        order = cursor.fetchall()
        if order != []:
            text = f"\U0001F534\U0001F6D2–ü—Ä–æ–¥–∞–≤–µ—Ü —É–¥–∞–ª–∏–ª –≤–∞—à –∑–∞–∫–∞–∑ ‚Ññ`{order[0][0]}`\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
            spis_purchages = []
            for ord in order:
                if ord[12] not in spis_purchages:
                    spis_purchages.append(ord[12])
            cost = 0
            spis_purchages = sorted(spis_purchages)
            for purchage in spis_purchages:
                text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                number = 1
                cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (int(message.text), purchage))
                orderss = cursor.fetchall()
                for ordd in orderss:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (ordd[1],))
                    price = cursor.fetchall()
                    text += f"{number}. –¢–æ–≤–∞—Ä {ordd[1]} **{ordd[2]}**. –ö–æ–ª-–≤–æ: {ordd[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * ordd[3]}‚ÇΩ.\n"
                    cost += price[0][0] * ordd[3]
                    number += 1
            text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
            try:
                await app.send_message(chat_id=order[0][4], text=text)
            except:
                pass
            for ord in order:
                cursor.execute("SELECT book, ordered FROM Plants WHERE num = ?", (ord[1],))
                count = cursor.fetchall()
                cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (count[0][0] - ord[3], ord[1]))
                if ord[11] == 1:
                    cursor.execute("UPDATE Plants SET ordered = ? WHERE num = ?", (count[0][1] - ord[3], ord[1]))
                connection.commit()
            cursor.execute("DELETE FROM orders WHERE num = ?", (int(message.text),))
            connection.commit()
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.send_message(chat_id=message.from_user.id, text=f"\U00002705–ó–∞–∫–∞–∑ ‚Ññ`{order[0][0]}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç –∑–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=markup)
        connection.close()
    else:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ", reply_markup=markup)

async def view_order(client, message):
    if (message.text).isdigit():
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_post, name, adress, telephone, reciept, is_pay, class, purchage FROM orders WHERE num = ?", (int(message.text),))
        order = cursor.fetchall()
        if order != []:
            if order[0][6] == "post":
                send = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
            elif order[0][6] == "sdek":
                send = "–°–î–≠–ö"
            elif order[0][6] == "sam":
                send = "–°–∞–º–æ–≤—ã–≤–æ–∑"
            else:
                send = order[0][6]
            if order[0][10] != None:
                file = "–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω"
            else:
                file = "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
            if order[0][11] == True:
                money = "–û–ø–ª–∞—á–µ–Ω"
            else:
                money = "–ù–µ –æ–ø–ª–∞—á–µ–Ω"
            if order[0][6] == "post":
                if order[0][12] == 1:
                    word_send = "**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: –£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
                else:
                    word_send = "**–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏**: –û–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
            else:
                word_send = ""
            if order[0][11] == True:
                text = f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {order[0][0]}\n**–ó–∞–∫–∞–∑—á–∏–∫:** {order[0][5]}\n**–û–ø–ª–∞—Ç–∞:** {money}\n**–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:** {send}\n{word_send}**–§–ò–û –∑–∞–∫–∑–∞—á–∏–∫–∞:** {order[0][7]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:** {order[0][8]}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** {order[0][9]}\n**–ß–µ–∫:** {file}\n\n**–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:**\n"
                spis_purchages = []
                for ord in order:
                    if ord[13] not in spis_purchages:
                        spis_purchages.append(ord[13])
                cost = 0
                spis_purchages = sorted(spis_purchages)
                for purchage in spis_purchages:
                    text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                    number = 1
                    cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (int(message.text), purchage))
                    orderss = cursor.fetchall()
                    for ordd in orderss:
                        cursor.execute("SELECT price FROM Plants WHERE num = ?", (ordd[1],))
                        price = cursor.fetchall()
                        text += f"{number}. –¢–æ–≤–∞—Ä {ordd[1]} **{ordd[2]}**. –ö–æ–ª-–≤–æ: {ordd[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * ordd[3]}‚ÇΩ.\n"
                        cost += price[0][0] * ordd[3]
                        number += 1
                text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
                text = text.replace("None", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                if order[0][10] != None:
                    try:
                        if "jpg" in order[0][10]:
                            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
                            await app.send_photo(chat_id=message.from_user.id, photo=order[0][10], caption=text, reply_markup=markup)
                        else:
                            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
                            await app.send_document(chat_id=message.from_user.id, document=order[0][10], caption=text, reply_markup=markup)
                    except:
                        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
                        await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)  
                else:
                    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
                    await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
            else:
                text = f"**–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:** {order[0][0]}\n**–ó–∞–∫–∞–∑—á–∏–∫:** {order[0][5]}\n**–û–ø–ª–∞—Ç–∞:**{money}"
                num = 1
                for ord in order:
                    cursor.execute("SELECT price FROM Plants WHERE num = ?", (ord[1],))
                    price = cursor.fetchall()
                    text += f"{num}. **–¢–æ–≤–∞—Ä:** {ord[2]}, **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {ord[3]} —à—Ç., **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {price[0][0] * ord[3]}‚ÇΩ\n"
                    num += 1
                text = text.replace("None", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
                await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç –∑–∞–∫–∞–∑–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=markup)
        connection.close()
    else:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table2")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ", reply_markup=markup)

async def add_admin_order(client, message):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    telephone = ""
    username = ""
    is_post = ""
    name = ""
    adress = ""
    text = message.text
    try:
        flag = True
        index = text.find("-")
        if index == -1:
            flag = False
        telephone = text[:(index-1)]
        text = text[(index+2):]
        index = text.find("-")
        if index == -1:
            flag = False
        username = text[:(index-1)]
        text = text[(index+2):]
        index = text.find("-")
        if index == -1:
            flag = False
        is_post = text[:(index-1)]
        text = text[(index+2):]
        index = text.find("-")
        if index == -1:
            flag = False
        name = text[:(index-1)]
        text = text[(index+2):]
        adress = text
        if flag == False:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"add_admin_order")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
            return
        markup = ReplyKeyboardMarkup([[KeyboardButton("\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.send_message(chat_id=message.from_user.id, text="\U00002795–î–æ–±–∞–≤—å—Ç–µ –≤ –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: 2 - 4", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, new_product, kwargs={"telephone": telephone, "username": username, "is_post": is_post, "name": name, "adress": adress})
    except:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"add_admin_order")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
    connection.close()

async def new_product(client, message, telephone: str = True, username: str = True, is_post: str = True, name: str = True, adress: str = True):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U0001F7E2\U0001F195–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–¢–µ–ª–µ—Ñ–æ–Ω - –Æ–∑–µ—Ä–Ω–µ–π–º –≤ Telegram - –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è - –§–ò–û - –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: +79163456789 - @example - –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏ - –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á - –≥. –ü—Ä–∏–º–µ—Ä–Ω—ã–π, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1, –∫–≤. 1", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, add_admin_order)
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    num = ""
    count = ""
    text = message.text
    try:
        index = text.find("-")
        num = text[:(index-1)]
        text = text[(index+2):]
        count = text
        cursor.execute("SELECT name FROM Plants WHERE num = ?", (int(num),))
        prod = cursor.fetchall()
        if prod == []:
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n\U00002795–î–æ–±–∞–≤—å—Ç–µ –≤ –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: 2 - 4", reply_markup=markup)
            await pyrostep.register_next_step(message.from_user.id, new_product, kwargs={"telephone": telephone, "username": username, "is_post": is_post, "name": name, "adress": adress})
            return
        cursor.execute('SELECT num FROM orders WHERE telephone = ? and status = ?', (telephone, 1))
        cust_id = cursor.fetchall()
        if cust_id == []:
            cursor.execute('SELECT num FROM orders')
            cust_id = cursor.fetchall()
            if cust_id == []:
                cust_id = 1
            else:
                cust_id = cust_id[-1][0]
                cust_id += 1
        else:
            cust_id = cust_id[0][0]
        cursor.execute("SELECT purchage FROM Plants WHERE num = ?", (int(num),))
        purchage = cursor.fetchall()
        cursor.execute("INSERT INTO orders (num, purchage, product, product_name, count, customer_name, is_pay, is_post, name, adress, telephone, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", (cust_id, purchage[0][0], num, prod[0][0], int(count), username, True, is_post, name, adress, telephone, 1))
        connection.commit()
        cursor.execute("SELECT book, ordered FROM Plants WHERE num = ?", (int(num),))
        book = cursor.fetchall()
        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (book[0][0] + int(count), int(num)))
        cursor.execute("UPDATE Plants SET ordered = ? WHERE num = ?", (book[0][1] + int(count), int(num)))
        connection.commit()
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="\U00002795–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"new_product{cust_id}")], [InlineKeyboardButton(text="\U00002705–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"save_admin_order{cust_id}")]])
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏\U00002B07", reply_markup=markup)
    except:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\n\n\U00002795–î–æ–±–∞–≤—å—Ç–µ –≤ –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–ù–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞**\n\n\U00002705–ü—Ä–∏–º–µ—Ä: 2 - 4", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, new_product, kwargs={"telephone": telephone, "username": username, "is_post": is_post, "name": name, "adress": adress})
    connection.close()

async def part_new_purchage(function_call):
    markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
    await app.send_message(chat_id=function_call.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –∏ –µ—ë —Å—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏; –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞; –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É; –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞; –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π; –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π\n\n\U00002705–ü—Ä–∏–º–µ—Ä:\n–∑–∞–∫—É–ø–∫–∞—Ä–æ—Å—Å–∏—è1; 1-2 –¥–Ω–µ–π; 3-5 –¥–Ω–µ–π; 7 –¥–Ω–µ–π; 5-7 –¥–Ω–µ–π; 8-10 —á–∞—Å–æ–≤", reply_markup=markup)
    await app.delete_messages(chat_id=function_call.from_user.id, message_ids=function_call.message.id)
    await pyrostep.register_next_step(function_call.from_user.id, new_purchage)

async def admin_purchage(message):
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F195–ù–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞", callback_data=f"new_purchage")], [InlineKeyboardButton("\U00002716–ó–∞–∫—Ä—ã—Ç—å –∑–∞–∫—É–ø–∫—É", callback_data=f"del_purchage")], [InlineKeyboardButton("\U0000270F–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫—É–ø–∫—É", callback_data=f"edit_purchage")], [InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")]])
    await app.send_message(chat_id=message.from_user.id, text="\U0000270F–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

async def new_purchage(client, message):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        await admin_purchage(message)
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    text = message.text
    name = ""
    time1 = ""
    time2 = ""
    time3 = ""
    time4 = ""
    time5 = ""
    flag = True
    index = text.find(";")
    if index == -1:
        flag = False
    name = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time1 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time2 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time3 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time4 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index != -1:
        flag = False
    time5 = text
    if flag == False:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_purchage")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
        return
    cursor.execute("SELECT * FROM purchages WHERE name = ?", (name,))
    name_is = cursor.fetchall()
    if name_is != []:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫—É–ø–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_purchage")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ó–∞–∫—É–ø–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", reply_markup=markup)
        return  
    cursor.execute("INSERT INTO purchages (name, time1, time2, time3, time4, time5) VALUES (?, ?, ?, ?, ?, ?)", (name, time1, time2, time3, time4, time5))
    connection.commit()
    cursor.execute("SELECT name, time1, time2, time3, time4, time5 FROM purchages WHERE name = ?", (name,))
    purchage = cursor.fetchall()
    connection.close()
    markup = ReplyKeyboardRemove()
    await app.send_message(chat_id=message.from_user.id, text="\U00002714–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã", reply_markup=markup)
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"again_new_purchage{purchage[0][0]}")], [InlineKeyboardButton("\U00002705–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_purchage{purchage[0][0]}")]])
    await app.send_message(chat_id=message.from_user.id, text=f"\U00002139–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–∫—É–ø–∫–µ:\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** {purchage[0][0]}\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0][1]}\n**–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É:** {purchage[0][2]}\n**–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0][3]}\n**–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[0][4]}\n**–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[0][5]}", reply_markup=markup)

async def edit_purchage(client, message, name: str = True):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    text = message.text
    time1 = ""
    time2 = ""
    time3 = ""
    time4 = ""
    time5 = ""
    flag = True
    index = text.find(";")
    if index == -1:
        flag = False
    time1 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time2 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time3 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index == -1:
        flag = False
    time4 = text[:(index)]
    text = text[(index+2):]
    index = text.find(";")
    if index != -1:
        flag = False
    time5 = text
    if flag == False:
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"edit_purchage")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
        return
    cursor.execute("UPDATE purchages SET time1 = ?, time2 = ?, time3 = ?, time4 = ?, time5 = ? WHERE name = ?", (time1, time2, time3, time4, time5, name))
    connection.commit()
    cursor.execute("SELECT name, time1, time2, time3, time4, time5 FROM purchages WHERE name = ?", (name,))
    purchage = cursor.fetchall()
    connection.close()
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0000270F–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ", callback_data=f"edt_name_purchage{purchage[0][0]}")], [InlineKeyboardButton("\U00002705–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_purchage{purchage[0][0]}")]])
    await app.send_message(chat_id=message.from_user.id, text=f"\U00002139–ò–∑–º–µ–Ω—ë–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫—É–ø–∫–µ:\n\n**–ù–∞–∑–≤–∞–Ω–∏–µ:** {purchage[0][0]}\n**–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0][1]}\n**–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ —Å–∞–¥–æ–≤–Ω–∏–∫—É:** {purchage[0][2]}\n**–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:** {purchage[0][3]}\n**–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[0][4]}\n**–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π:** {purchage[0][5]}", reply_markup=markup)

async def new_table(client, message, name: str = True):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        await admin_table(message)
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    cursor.execute('DELETE FROM Temp_plants')
    connection.commit()
    num = ""
    name_product = ""
    kolvo = ""
    text = message.text
    flag = True
    try:
        if text.find("-") == -1:
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
            return
        while text.find("-") != -1:
            index = text.find("-")
            if index == -1:
                flag = False
            num = text[:(index-1)]
            text = text[(index+2):]
            index = text.find("-")
            if index == -1:
                flag = False
            name_product = text[:(index-1)]
            text = text[(index+2):]
            index = text.find("-")
            if index == -1:
                flag = False
            kolvo = text[:(index-1)]
            text = text[(index+2):]
            index = text.find(",")
            if index != -1:
                price = text[:(index)]
            else:
                price = text
            text = text[(index+2):]
            if flag == False:
                markup = ReplyKeyboardRemove()
                await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
                await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
                return
            cursor.execute("SELECT * FROM Plants WHERE num = ?", (int(num),))
            is_num = cursor.fetchall()
            if is_num != []:
                markup = ReplyKeyboardRemove()
                await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
                await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è (–¥–∞–∂–µ –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –∑–∞–∫—É–ø–∫–∞—Ö)", reply_markup=markup)
                return
            cursor.execute('INSERT INTO Temp_plants (num, purchage, name, count, price) VALUES (?, ?, ?, ?, ?)', (int(num), name, name_product, int(kolvo), int(price)))
        connection.commit()
    except:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
        return
    cursor.execute("SELECT num, name, count, price FROM Temp_plants")
    all_plants = cursor.fetchall()
    text = f"–¢–µ–ø–µ—Ä—å —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{name}** –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n**–ù–æ–º–µ—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞**\n"
    for plant in all_plants:
        text += f"{plant[0]} | {plant[1]} | {plant[2]} | {plant[3]}—Ä.\n"
    markup = ReplyKeyboardRemove()
    await app.send_message(chat_id=message.from_user.id, text="\U00002714–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã", reply_markup=markup)
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–í—Å—ë –≤–µ—Ä–Ω–æ", callback_data=f"right_new_table{name}")], [InlineKeyboardButton("\U0000274C–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"new_table")]])
    await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
    connection.close()
    
async def admin_table(message):
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F195–ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞", callback_data=f"new_table")], [InlineKeyboardButton("\U00002796–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"del_column_table")], [InlineKeyboardButton("\U00002795–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"add_column_table")], [InlineKeyboardButton("\U0001F4CF–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=f"count_table")], [InlineKeyboardButton("\U0001F519–ù–∞–∑–∞–¥", callback_data=f"exit_table")]])
    await app.send_message(chat_id=message.from_user.id, text="\U0000270F–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

async def add_column_table(client, message, name: str = True):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        await admin_table(message)
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    num = ""
    name_product = ""
    kolvo = ""
    text = message.text
    flag = True
    try:
        index = text.find("-")
        if index == -1:
            flag = False
        num = text[:(index-1)]
        text = text[(index+2):]
        index = text.find("-")
        if index == -1:
            flag = False
        name_product = text[:(index-1)]
        text = text[(index+2):]
        index = text.find("-")
        if index == -1:
            flag = False
        kolvo = text[:(index-1)]
        text = text[(index+2):]
        price = text
        if flag == False:
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"add_column_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
            return
        cursor.execute("SELECT * FROM Plants WHERE num = ?", (int(num),))
        is_num = cursor.fetchall()
        if is_num != []:
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"new_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.send_message(chat_id=message.from_user.id, text=f"\U0000274C–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∑–∞–∫—É–ø–∫–µ **{is_num[0][1]}", reply_markup=markup)
            return
        cursor.execute('INSERT INTO Plants (num, purchage, name, count, price, book, ordered) VALUES (?, ?, ?, ?, ?, ?, ?)', (int(num), name, name_product, int(kolvo), int(price), 0, 0))
        connection.commit()
    except:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002714–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"add_column_table")], [InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞ –≤–æ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", reply_markup=markup)
        return
    cursor.execute("SELECT num, name, count, price FROM Plants WHERE purchage = ?", (name,))
    all_plants = cursor.fetchall()
    text = f"\U00002705–ì–æ—Ç–æ–≤–æ! –°–µ–π—á–∞—Å —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{name}** –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n**–ù–æ–º–µ—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞**\n"
    for plant in all_plants:
        text += f"{plant[0]} | {plant[1]} | {plant[2]} | {plant[3]}—Ä.\n"
    markup = ReplyKeyboardRemove()
    await app.send_message(chat_id=message.from_user.id, text="\U00002714–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã", reply_markup=markup)
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
    await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
    connection.close()

async def del_column_table(client, message):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        await admin_table(message)
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT num FROM Plants WHERE num = ?", (int(message.text),))
        need_num = cursor.fetchall()
        if (int(message.text),) in need_num:
            cursor.execute("SELECT purchage FROM Plants WHERE num = ?", (int(message.text),))
            purchage = cursor.fetchall()
            cursor.execute("SELECT * FROM orders WHERE product = ?", (int(message.text),))
            orders = cursor.fetchall()
            cursor.execute("SELECT price FROM Plants WHERE num = ?", (int(message.text),))
            price = cursor.fetchall()
            text_users = "\U0000203C–£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–∫–∞–∑–∞ –±—ã–ª —É–¥–∞–ª—ë–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä:\n\n"
            num = 1
            for order in orders:
                cursor.execute("SELECT price FROM Plants WHERE num = ?", (order[1],))
                price = cursor.fetchall()
                text_users += f"{num}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {order[5]}, {order[3]} —à—Ç. –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ\n"
                cursor.execute("SELECT * FROM orders WHERE num = ?", (order[0],))
                is_order = cursor.fetchall()
                try:
                    text = f"\U0001F534\U00002702–ò–∑ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{order[0]} –±—ã–ª —É–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä **{order[2]}**, {order[3]} —à—Ç. –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ\n\n\U0001F4CC–ü—Ä–∏—á–∏–Ω–∞: —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–º"
                    if len(is_order) == 1:
                        text += "\n\n\U0000203C–í –∑–∞–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å. –ó–∞–∫–∞–∑ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ë–Ω"
                    await app.send_message(chat_id=order[4], text=text)
                except:
                    pass
                num += 1
            if text_users != "\U0000203C–£ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–∫–∞–∑–∞ –±—ã–ª —É–¥–∞–ª—ë–Ω –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä:\n\n":
                await app.send_message(chat_id=message.from_user.id, text=text_users)
            cursor.execute("DELETE FROM orders WHERE product = ?", (int(message.text),))
            cursor.execute("DELETE FROM Plants WHERE num = ?", (int(message.text),))
            connection.commit()
            cursor.execute("SELECT num, name, count, price FROM Plants WHERE purchage = ?", (purchage[0][0],))
            all_plants = cursor.fetchall()
            text = f"\U00002705–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{purchage[0][0]}** –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n**–ù–æ–º–µ—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞**\n"
            for plant in all_plants:
                text += f"{plant[0]} | {plant[1]} | {plant[2]} | {plant[3]}—Ä.\n"
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U00002714–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω", reply_markup=markup)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
            await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        else:
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U00002716–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"del_column_table")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=markup)
    except:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"del_column_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=markup)
    connection.close()

async def count_table(client, message):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=markup)
        await admin_table(message)
        return
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    try:
        cursor.execute("SELECT num FROM Plants WHERE num = ?", (int(message.text),))
        need_num = cursor.fetchall()
        if (int(message.text),) in need_num:
            await app.send_message(chat_id=message.from_user.id, text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ‚Ññ**{need_num[0][0]}**")
            await pyrostep.register_next_step(message.from_user.id, count_table_do, kwargs={"num": int(message.text)})

        else:
            markup = ReplyKeyboardRemove()
            await app.send_message(chat_id=message.from_user.id, text="\U00002716–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=markup)
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"count_table")]])
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=markup)
    except:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"count_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ—Ç —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º", reply_markup=markup)
    connection.close()

async def count_table_do(client, message, num: int = True):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        await app.send_message(chat_id=message.from_user.id, text="\U0001F4CF–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å")
        await app.delete_messages(chat_id=message.from_user.id, message_ids=message.id)
        await pyrostep.register_next_step(message.from_user.id, count_table)
    try:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("UPDATE Plants SET count = ? WHERE num = ?", (int(message.text), num))
        connection.commit()
        cursor.execute("SELECT purchage FROM Plants WHERE num = ?", (num,))
        purchage = cursor.fetchall()
        cursor.execute("SELECT num, name, count, price FROM Plants WHERE purchage = ?", (purchage[0][0],))
        all_plants = cursor.fetchall()
        text = f"\U00002705–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{purchage[0][0]}** –≤—ã–≥–ª—è–¥–∏—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n**–ù–æ–º–µ—Ä | –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –¶–µ–Ω–∞**\n"
        for plant in all_plants:
            text += f"{plant[0]} | {plant[1]} | {plant[2]} | {plant[3]}—Ä.\n"
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"exit_table")]])
        await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        connection.close()
    except:
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=markup)
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"count_table")]])
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ", reply_markup=markup)

async def async_my_account(client, message):
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**.\n\n\U00002139–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n**–§–ò–û**: {user[0][1]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {user[0][2]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {user[0][3]}"
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07"
        await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        connection.close()

async def add_lk_name(client, message):
    if message.text == "\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002716–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=markup)
        await async_my_account("_", message)
        return
    elif message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002702–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\U0001F464–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∑–∞–æ–≤ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /account", reply_markup=markup)
        return
    else:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Temp_users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            cursor.execute("DELETE FROM Temp_users WHERE id = ?", (message.from_user.id,))
            connection.commit()
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        cursor.execute("INSERT INTO Temp_users (id, name) VALUES (?, ?)", (message.from_user.id, message.text))
        connection.commit()
        await app.send_message(chat_id=message.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∞–¥—Ä–µ—Å", reply_markup=markup)
        connection.close()
        await pyrostep.register_next_step(message.from_user.id, add_lk_adress)

async def add_lk_adress(client, message):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        await app.send_message(chat_id=message.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, add_lk_name)
        return
    else:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F4CE–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)], [KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        cursor.execute("UPDATE Temp_users SET adress = ? WHERE id = ?", (message.text, message.from_user.id))
        connection.commit()
        await app.send_message(chat_id=message.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π\U00002B07", reply_markup=markup)
        connection.close()
        await pyrostep.register_next_step(message.from_user.id, add_lk_phone)

async def add_lk_phone(client, message):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    if message.contact != None:
        cursor.execute("UPDATE Temp_users SET telephone = ? WHERE id = ?", (f"+{message.contact.phone_number}", message.from_user.id))
        connection.commit()
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U00002705–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")], [KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")], [KeyboardButton(text="\U0000274C–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")]], resize_keyboard=True)
        cursor.execute("SELECT id, name, adress, telephone FROM Temp_users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        await app.send_message(chat_id=message.from_user.id, text=f"\U0001F50E–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n**–§–ò–û:** {user[0][1]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:** {user[0][2]}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** {user[0][3]}", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, save_lk_data)
        connection.close()
    else:
        if message.text == "\U0001F519–ù–∞–∑–∞–¥":
            markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
            await app.send_message(chat_id=message.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –∞–¥—Ä–µ—Å", reply_markup=markup)
            await pyrostep.register_next_step(message.from_user.id, add_lk_adress)
            connection.close()
            return
        else:
            cursor.execute("UPDATE Temp_users SET telephone = ? WHERE id = ?", (message.text, message.from_user.id))
            connection.commit()
            markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U00002705–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")], [KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")], [KeyboardButton(text="\U0000274C–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ")]], resize_keyboard=True)
            cursor.execute("SELECT id, name, adress, telephone FROM Temp_users WHERE id = ?", (message.from_user.id,))
            user = cursor.fetchall()
            await app.send_message(chat_id=message.from_user.id, text=f"\U0001F50E–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n**–§–ò–û:** {user[0][1]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:** {user[0][2]}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** {user[0][3]}", reply_markup=markup)
            await pyrostep.register_next_step(message.from_user.id, save_lk_data)
            connection.close()

async def save_lk_data(client, message):
    if message.text == "\U0001F519–ù–∞–∑–∞–¥":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F4CE–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä", request_contact=True)], [KeyboardButton(text="\U0001F519–ù–∞–∑–∞–¥")]], resize_keyboard=True)
        await app.send_message(chat_id=message.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π\U00002B07", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, add_lk_phone)
        return
    elif message.text == "\U0000274C–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ":
        markup = ReplyKeyboardMarkup([[KeyboardButton(text="\U0001F3E0–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)
        await app.send_message(chat_id=message.from_user.id, text="\U0000270F–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û", reply_markup=markup)
        await pyrostep.register_next_step(message.from_user.id, add_lk_name)
    else:
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, name, adress, telephone FROM Temp_users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (message.from_user.id,))
        user_check = cursor.fetchall()
        if user_check != []:
            cursor.execute("DELETE FROM Users WHERE id = ?", (message.from_user.id,))
            connection.commit()
        cursor.execute("INSERT INTO Users (id, name, adress, telephone) VALUES (?, ?, ?, ?)", (message.from_user.id, user[0][1], user[0][2], user[0][3]))
        connection.commit()
        markup = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002705–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞\U0001F389", reply_markup=markup)
        cursor.execute("SELECT id, name, adress, telephone FROM Users WHERE id = ?", (message.from_user.id,))
        user = cursor.fetchall()
        if user != []:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**.\n\n\U00002139–î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n**–§–ò–û**: {user[0][1]}\n**–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏**: {user[0][2]}\n**–¢–µ–ª–µ—Ñ–æ–Ω**: {user[0][3]}"
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F6D2–ö–æ—Ä–∑–∏–Ω–∞", callback_data=f"basket")], [InlineKeyboardButton("\U0001F69B–ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data=f"my_orders")], [InlineKeyboardButton("\U00002699–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"change_my_data")]])
            text = f"\U0001F512–í—ã –≤–æ—à–ª–∏ –≤ –≤–∞—à **–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ\U00002B07"
        await app.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)
        connection.close()

async def send_name(client, message, num: int = True):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    cursor.execute("UPDATE orders SET name = ? WHERE num = ?", (message.text, num))
    connection.commit()
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ\U000027A1", callback_data=f"send_adress{num}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_name{num}")]])
    await app.send_message(chat_id=message.from_user.id, text=f"–í–∞—à–µ –§–ò–û: **{message.text}**",reply_markup=markup)
    connection.close()

async def send_adress(client, message, num: int = True):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    cursor.execute("UPDATE orders SET adress = ? WHERE num = ?", (message.text, num))
    connection.commit()
    markup = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª–µ–µ\U000027A1", callback_data=f"send_phone{num}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_adress{num}")]])
    await app.send_message(chat_id=message.from_user.id, text=f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: **{message.text}**",reply_markup=markup)
    connection.close()

async def send_phone(client, message, num: int = True):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    if message.contact != None:
        cursor.execute("UPDATE orders SET telephone = ? WHERE num = ?", (f"+{message.contact.phone_number}", num))
        connection.commit()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"send_data{num}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_phone{num}")]])
        markup2 = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω", reply_markup=markup2)
        await app.send_message(chat_id=message.from_user.id, text=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: **+{message.contact.phone_number}**", reply_markup=markup)
    else:
        cursor.execute("UPDATE orders SET telephone = ? WHERE num = ?", (message.text, num))
        connection.commit()
        markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U00002705–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data=f"send_data{num}")], [InlineKeyboardButton("\U00002B05–ù–∞–∑–∞–¥", callback_data=f"send_phone{num}")]])
        markup2 = ReplyKeyboardRemove()
        await app.send_message(chat_id=message.from_user.id, text="\U00002714–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω", reply_markup=markup2)
        await app.send_message(chat_id=message.from_user.id, text=f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: **{message.text}**",reply_markup=markup)
    connection.close()

async def buy_done(client, message, num: int = True):
    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
    cursor = connection.cursor()
    cursor.execute("SELECT product, product_name, count, customer_id, customer_name, purchage FROM orders WHERE num = ?", (num,))
    orders = cursor.fetchall()
    if orders != []:
        if str(message.media) == "MessageMediaType.PHOTO":
            try:
                path = await app.download_media(message=message, file_name=f"C:/Users/Administrator/My_bots/Botanica_club_bot/{num}.jpg")
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F4CE–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"buy_confirm{num}")], [InlineKeyboardButton("\U0000274C–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"buy_reject{num}")]])
                text = f"\U0001F4CE–ß–µ–∫ –∫ –∑–∞–∫–∞–∑—É ‚Ññ`{num}`\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
                spis_purchages = []
                for order in orders:
                    if order[5] not in spis_purchages:
                        spis_purchages.append(order[5])
                cost = 0
                spis_purchages = sorted(spis_purchages)
                for purchage in spis_purchages:
                    text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                    number = 1
                    cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                    orderss = cursor.fetchall()
                    for orderr in orderss:
                        cursor.execute("SELECT price FROM Plants WHERE num = ?", (orderr[1],))
                        price = cursor.fetchall()
                        text += f"{number}. –¢–æ–≤–∞—Ä {orderr[1]} **{orderr[2]}**. –ö–æ–ª-–≤–æ: {orderr[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * orderr[3]}‚ÇΩ.\n"
                        cost += price[0][0] * orderr[3]
                        number += 1
                text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
                await app.send_photo(chat_id=1333967466, photo=path, caption=text, reply_markup=markup)
                await app.send_photo(chat_id=993684230, photo=path, caption=text, reply_markup=markup)
                cursor.execute("UPDATE orders SET reciept = ?, status = ? WHERE num = ?", (path, 4, num))
                connection.commit()
                await app.send_message(chat_id=message.from_user.id, text=f"\U0001F7E2\U0001F4CE–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ ‚Ññ`{num}` –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            except:
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F4CE–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"buy_done{num}")]]) 
                await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ pdf-—Ñ–∞–π–ª–∞", reply_markup=markup)
        elif str(message.media) == "MessageMediaType.DOCUMENT" and message.document.file_name[-3:] == "pdf":
            try:
                path = await app.download_media(message=message, file_name=f"C:/Users/Administrator/My_bots/Botanica_club_bot/{num}.pdf")
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F4CE–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"buy_confirm{num}")], [InlineKeyboardButton("\U0000274C–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"buy_reject{num}")]])
                text = f"\U0001F4CE–ß–µ–∫ –∫ –∑–∞–∫–∞–∑—É ‚Ññ`{num}`\n\n\U0001F4E6–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n\n"
                spis_purchages = []
                for order in orders:
                    if order[5] not in spis_purchages:
                        spis_purchages.append(order[5])
                cost = 0
                spis_purchages = sorted(spis_purchages)
                for purchage in spis_purchages:
                    text += f"**–ó–∞–∫—É–ø–∫–∞ {purchage}**\n"
                    number = 1
                    cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay, status, purchage FROM orders WHERE num = ? and purchage = ?", (num, purchage))
                    orders = cursor.fetchall()
                    for order in orders:
                        cursor.execute("SELECT price FROM Plants WHERE num = ?", (order[1],))
                        price = cursor.fetchall()
                        text += f"{number}. –¢–æ–≤–∞—Ä {order[1]} **{order[2]}**. –ö–æ–ª-–≤–æ: {order[3]} –Ω–∞ —Å—É–º–º—É {price[0][0] * order[3]}‚ÇΩ.\n"
                        cost += price[0][0] * order[3]
                        number += 1
                text += f"\n\U0001F4B5**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost}‚ÇΩ**"
                await app.send_document(chat_id=1333967466, document=path, caption=text, reply_markup=markup)
                await app.send_document(chat_id=993684230, document=path, caption=text, reply_markup=markup)
                cursor.execute("UPDATE orders SET reciept = ?, status = ? WHERE num = ?", (path, 4, num))
                connection.commit()
                await app.send_message(chat_id=message.from_user.id, text="\U0001F7E2\U0001F4CE–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.")
            except:
                markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F4CE–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"buy_done{num}")]]) 
                await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ pdf-—Ñ–∞–π–ª–∞", reply_markup=markup)
        else:
            markup = InlineKeyboardMarkup([[InlineKeyboardButton("\U0001F4CE–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫", callback_data=f"buy_done{num}")]]) 
            await app.send_message(chat_id=message.from_user.id, text="\U0000274C–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ß–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ pdf-—Ñ–∞–π–ª–∞", reply_markup=markup)
    else:
        await app.send_message(chat_id=message.from_user.id, text="\U0000274C–û—à–∏–±–∫–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤")
    connection.close()

async def view_table_orders(message, name_purchage):
        mess = await app.send_message(chat_id=message.from_user.id, text=f"\U0001F551–°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–∫—É–ø–∫–∏ **{name_purchage}**")
        connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
        cursor = connection.cursor()
        cursor.execute("SELECT num, name FROM Plants")
        plants = cursor.fetchall()
        head = ["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ó–∞–∫—É–ø–∫–∞", "–û–ø–ª–∞—Ç–∞", "–°—Ç–∞—Ç—É—Å", "ID –∑–∞–∫–∞–∑—á–∏–∫–∞", "–ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞", "–î–æ—Å—Ç–∞–≤–∫–∞", "–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏", "–§–ò–û", "–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–¢–µ–ª–µ—Ñ–æ–Ω"]
        plants_nums = []
        for plant in plants:
            head.append(plant[1])
            plants_nums.append(plant[0])
        cursor.execute("SELECT purchage FROM orders")
        pchg = cursor.fetchall()
        cursor.execute("SELECT num FROM orders WHERE purchage = ? ORDER BY num", (name_purchage,))
        nums = cursor.fetchall()
        spis_nums = []
        data = []
        spis_ids = []
        for num in nums:
            if num[0] not in spis_nums:
                spis_nums.append(num[0])
                cursor.execute("SELECT * FROM orders WHERE num = ? and purchage = ?", (num[0], name_purchage))
                orders = cursor.fetchall()
                if orders[0][5] not in spis_ids:
                    spis_ids.append(orders[0][5])
                    datapr = []
                    cursor.execute("SELECT * FROM orders WHERE num = ? ORDER BY purchage", (num[0],))
                    spis_num_need = cursor.fetchall()
                    need_num = 1
                    for spis_need_num_one in spis_num_need:
                        if spis_need_num_one[1] == name_purchage:
                            break
                        need_num += 1
                    flag = False
                    for spis_need_num_one in spis_num_need:
                        if spis_need_num_one[1] != name_purchage:
                            flag = True
                    if flag == True:
                        datapr.append(str(orders[0][0]) + "." + str(need_num))
                    else:
                        datapr.append(str(orders[0][0]))
                    datapr.append(name_purchage)
                    datapr.append(orders[0][7])
                    if orders[0][13] == 1:
                        datapr.append("–í –∫–æ—Ä–∑–∏–Ω–µ")
                    elif orders[0][13] == 2:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞")
                    elif orders[0][13] == 3:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
                    elif orders[0][13] == 4:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã")
                    elif orders[0][13] == 5:
                        datapr.append("–û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    elif orders[0][13] == 6:
                        datapr.append("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
                    datapr.append(orders[0][5])
                    datapr.append(orders[0][6])
                    datapr.append(orders[0][8])
                    if orders[0][7] == "post":
                        if orders[0][13] == 1:
                            word_send = "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è"
                        else:
                            word_send = "–û–±—ã—á–Ω–∞—è"
                    else:
                        word_send = "-"
                    datapr.append(word_send)
                    datapr.append(orders[0][9])
                    datapr.append(orders[0][10])
                    datapr.append(orders[0][11])
                    product = {}
                    for order in orders:
                        product[f"{order[2]}"] = order[4]
                    for plant in plants_nums:
                        count = product.get(f"{plant}")
                        datapr.append(count)
                    cursor.execute("SELECT * FROM orders WHERE customer_id = ? and purchage = ?", (orders[0][5], name_purchage))
                    orders_id = cursor.fetchall()
                    data.append(datapr)
                    spis_nums_id = []
                    for order_id in orders_id:
                        if order_id[0] != num[0] and order_id[0] not in spis_nums_id:
                            spis_nums_id.append(order_id[0])
                            cursor.execute("SELECT * FROM orders WHERE num = ? and purchage = ?", (order_id[0], name_purchage))
                            orders_one_id = cursor.fetchall()
                            datapr = []
                            cursor.execute("SELECT * FROM orders WHERE num = ? ORDER BY purchage", (order_id[0],))
                            spis_num_need = cursor.fetchall()
                            need_num = 1
                            for spis_need_num_one in spis_num_need:
                                if spis_need_num_one[1] == name_purchage:
                                    break
                                need_num += 1
                            flag = False
                            for spis_need_num_one in spis_num_need:
                                if spis_need_num_one[1] != name_purchage:
                                    flag = True
                            if flag == True:
                                datapr.append(str(orders_one_id[0][0]) + "." + str(need_num))
                            else:
                                datapr.append(str(orders_one_id[0][0]))
                            datapr.append(name_purchage)
                            datapr.append(orders_one_id[0][7])
                            if orders_one_id[0][13] == 1:
                                datapr.append("–í –∫–æ—Ä–∑–∏–Ω–µ")
                            elif orders_one_id[0][13] == 2:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞")
                            elif orders_one_id[0][13] == 3:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã")
                            elif orders_one_id[0][13] == 4:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã")
                            elif orders_one_id[0][13] == 5:
                                datapr.append("–û–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
                            elif orders_one_id[0][13] == 6:
                                datapr.append("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç")
                            datapr.append(orders_one_id[0][5])
                            datapr.append(orders_one_id[0][6])
                            datapr.append(orders_one_id[0][8])
                            if orders_one_id[0][7] == "post":
                                if orders_one_id[0][13] == 1:
                                    word_send = "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è"
                                else:
                                    word_send = "–û–±—ã—á–Ω–∞—è"
                            else:
                                word_send = "-"
                            datapr.append(word_send)
                            datapr.append(orders_one_id[0][9])
                            datapr.append(orders_one_id[0][10])
                            datapr.append(orders_one_id[0][11])
                            product = {}
                            for order_one in orders_one_id:
                                product[f"{order_one[2]}"] = order_one[4]
                            for plant in plants_nums:
                                count = product.get(f"{plant}")
                                datapr.append(count)
                            data.append(datapr)
        wb = Workbook()
        ws = wb.active
        ws.append(head)
        for i in range(len(data)):
            ws.append(data[i])
        for i in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
            ws[f'{i}1'].font = Font(bold=True)
        ws[f'AA1'].font = Font(bold=True)
        ws.column_dimensions['A'].width = 15
        ws.column_dimensions['B'].width = 25
        ws.column_dimensions['D'].width = 40
        ws.column_dimensions['E'].width = 15
        ws.column_dimensions['F'].width = 20
        ws.column_dimensions['H'].width = 20
        ws.column_dimensions['I'].width = 50
        ws.column_dimensions['J'].width = 40
        ws.column_dimensions['K'].width = 20
        ws.column_dimensions['L'].width = 20
        ws.column_dimensions['M'].width = 20
        ws.column_dimensions['N'].width = 20
        ws.column_dimensions['O'].width = 20
        ws.column_dimensions['P'].width = 20
        ws.column_dimensions['Q'].width = 20
        ws.column_dimensions['R'].width = 20
        ws.column_dimensions['S'].width = 20
        ws.column_dimensions['T'].width = 20
        ws.column_dimensions['U'].width = 20
        ws.column_dimensions['V'].width = 20
        ws.column_dimensions['W'].width = 20
        ws.column_dimensions['X'].width = 20
        ws.column_dimensions['Y'].width = 20
        ws.column_dimensions['Z'].width = 20
        ws.column_dimensions['AA'].width = 20
        ws.column_dimensions['AB'].width = 20
        ws.column_dimensions['AC'].width = 20
        ws.column_dimensions['AD'].width = 20
        ws.column_dimensions['AE'].width = 20
        ws.column_dimensions['AF'].width = 20
        ws.column_dimensions['AG'].width = 20
        for col in ws.columns:
            for cell in col:
                alignment_obj = copy(cell.alignment)
                alignment_obj.horizontal = 'center'
                alignment_obj.vertical = 'center'
                cell.alignment = alignment_obj
        connection.close()
        wb.save(f"C:/Users/Administrator/My_bots/Botanica_club_bot/{name_purchage}.xlsx")
        await app.send_document(chat_id=message.from_user.id, document=f"C:/Users/Administrator/My_bots/Botanica_club_bot/{name_purchage}.xlsx", caption=f"\U0001F4CE–£–¥–∞–ª—ë–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∑–∞–∫—É–ø–∫–∏ {name_purchage}")
        await app.delete_messages(chat_id=message.from_user.id, message_ids=mess.id)

@app.on_message(filters.chat(chats=[-1001789882072]))
def posts_orders(client, message):
    if message.reply_to_message != None and message.from_user != None and message.text != None:
        if message.reply_to_message.text != None:
            mess_text = message.reply_to_message.text
        elif message.reply_to_message.caption != None:
            mess_text = message.reply_to_message.caption
        else:
            mess_text = ""
        if "#" in mess_text and "–ê—Ä—Ç–∏–∫—É–ª ‚Ññ" in mess_text:
            if (message.text).isdigit():
                connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
                cursor = connection.cursor()
                index = (mess_text).find("–ê—Ä—Ç–∏–∫—É–ª ‚Ññ")
                ind = ""
                for s in (mess_text)[index + 9:]:
                    if s.isdigit():
                        ind += s
                    else:
                        break
                ind = int(ind)
                index_purchage = (mess_text).find("#")
                text_find = (mess_text)[index_purchage:]
                index_purchage2 = text_find.find("\n")
                purchage = (mess_text)[index_purchage:index_purchage2 + index_purchage]
                cursor.execute("SELECT num, name, count, book FROM Plants WHERE num = ? and purchage = ?", (ind, purchage))
                plant = cursor.fetchall()
                if plant != []:
                    if (message.text).isdigit() and plant[0][2] - plant[0][3] >= int(message.text):
                        cursor.execute('SELECT num FROM orders WHERE customer_id = ? and status = ?', (message.from_user.id, 1))
                        cust_id = cursor.fetchall()
                        if cust_id == []:
                            cursor.execute('SELECT num FROM orders')
                            cust_id = cursor.fetchall()
                            if cust_id == []:
                                cust_id = 1
                            else:
                                max_num = 0
                                for id in cust_id:
                                    if id[0] > max_num:
                                        max_num = id[0]
                                cust_id = max_num
                                cust_id += 1
                        else:
                            cust_id = cust_id[0][0]
                        cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (plant[0][3] + int(message.text), ind))
                        cursor.execute('SELECT count FROM orders WHERE customer_id = ? and status = ? and product = ?', (message.from_user.id, 1, ind))
                        count_same = cursor.fetchall()
                        if count_same == []:
                            if message.from_user.username != None:
                                cursor.execute('INSERT INTO orders (num, product, product_name, count, customer_id, customer_name, status, purchage) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (cust_id, plant[0][0], plant[0][1], int(message.text), message.from_user.id, "@" + message.from_user.username, 1, purchage))
                            else:
                                cursor.execute('INSERT INTO orders (num, product, product_name, count, customer_id, customer_name, status, purchage) VALUES (?, ?, ?, ?, ?, ?, ?, ?)', (cust_id, plant[0][0], plant[0][1], int(message.text), message.from_user.id, f"<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>", 1, purchage))
                        else:
                            cursor.execute('UPDATE orders SET count = ? WHERE customer_id = ? and status = ? and product = ?', (count_same[0][0] + int(message.text), message.from_user.id, 1, ind))
                        connection.commit()
                        cursor.execute("SELECT num FROM orders WHERE num = ? and product = ? and product_name = ? and count = ? and customer_id = ?", (cust_id, plant[0][0], plant[0][1], int(message.text), message.from_user.id))
                        num = cursor.fetchall()
                        try:
                            app.send_message(chat_id=message.from_user.id, text=f'\U00002705\U0001F6D2–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É {message.text} —à—Ç. —Ç–æ–≤–∞—Ä–∞ ‚Ññ{plant[0][0]}: **{plant[0][1]}**.\n\n\U0001F6D2–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /basket')
                        except:
                            app.send_message(chat_id=message.chat.id, text="\U0000203C–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @Botanica_club_bot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_to_message_id=message.id)
                            cursor.execute("DELETE FROM orders WHERE num = ?", (num[-1][0],))
                            connection.commit()
                            cursor.execute("SELECT book FROM Plants WHERE num = ?", (plant[0][0],))
                            count = cursor.fetchall()
                            cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (plant[0][3], plant[0][0]))
                            connection.commit()
                    elif (message.text).isdigit() and plant[0][2] - plant[0][3] < int(message.text):
                        try:
                            app.send_message(chat_id=message.from_user.id, text=f"\U0000274C–í—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {message.text} —à—Ç. —Ç–æ–≤–∞—Ä–∞ ‚Ññ{plant[0][0]}: **{plant[0][1]}**.\n\n\U00002705–í –Ω–∞–ª–∏—á–∏–∏ {plant[0][2] - plant[0][3]} —à—Ç.")
                        except:
                            app.send_message(chat_id=message.chat.id, text="\U0000203C–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @Botanica_club_bot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_to_message_id=message.id)
                connection.close()
            elif message.text == "–û—Ç–∫–∞–∑" or message.text == "–æ—Ç–∫–∞–∑":
                try:
                    connection = sqlite3.connect("C:/Users/Administrator/My_bots/Botanica_club_bot/Plants.db")
                    cursor = connection.cursor()
                    index = (mess_text).find("–ê—Ä—Ç–∏–∫—É–ª ‚Ññ")
                    ind = ""
                    for s in (mess_text)[index + 9:]:
                        if s.isdigit():
                            ind += s
                        else:
                            break
                    ind = int(ind)
                    index_purchage = (mess_text).find("#")
                    text_find = (mess_text)[index_purchage:]
                    index_purchage2 = text_find.find("\n")
                    purchage = (mess_text)[index_purchage:index_purchage2 + index_purchage]
                    cursor.execute("SELECT num, name, count, book, price FROM Plants WHERE num = ?", (ind,))
                    plant = cursor.fetchall()
                    if plant != []:
                        cursor.execute("SELECT num, product, product_name, count, customer_id, customer_name, is_pay FROM orders WHERE customer_id = ? and product = ? and purchage = ?", (message.from_user.id, ind, purchage))
                        orders = cursor.fetchall()
                        if orders == []:
                            try:
                                app.send_message(chat_id=message.from_user.id, text=f"\U0000274C–û—à–∏–±–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞. –í –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                            except:
                                app.send_message(chat_id=message.chat.id, text="\U0000203C–î–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @Botanica_club_bot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_to_message_id=message.id)
                            return
                        cursor.execute("SELECT book FROM Plants WHERE num = ?", (orders[0][1],))
                        count = cursor.fetchall()
                        for order in orders:
                            if order[6] != 1:
                                cursor.execute("DELETE FROM orders WHERE num = ? and product = ?", (order[0], ind))
                                connection.commit()
                                cursor.execute("UPDATE Plants SET book = ? WHERE num = ?", (count[0][0] - order[3], order[1]))
                                connection.commit()
                                try:
                                    app.send_message(chat_id=message.from_user.id, text=f"\U0001F534\U0001F6D2–í –∑–∞–∫–∞–∑–µ ‚Ññ`{order[0]}` —Ç–æ–≤–∞—Ä **{order[2]}**, {order[3]} —à—Ç. –Ω–∞ —Å—É–º–º—É {plant[0][4] * order[3]}‚ÇΩ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω")
                                except:
                                    app.send_message(chat_id=message.chat.id, text="\U0000203C–î–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @Botanica_club_bot", reply_to_message_id=message.id)
                except:
                    try:
                        app.send_message(chat_id=message.from_user.id, text=f"\U0000274C–û—à–∏–±–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Ç–æ–≤–∞—Ä–∞. –í –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–∞—Ö –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
                    except:
                        app.send_message(chat_id=message.chat.id, text="\U0000203C–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–Ω—É, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @Botanica_club_bot –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_to_message_id=message.id)
                connection.close()

app.run()   